// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_login.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 微信登录登陆:https://developers.weixin.qq.com/miniprogram/dev/api/open.html#wxgetuserinfoobject
type CWxLogin struct {
	WithCredentials bool   `protobuf:"varint,1,opt,name=withCredentials,proto3" json:"withCredentials,omitempty"`
	RawData         string `protobuf:"bytes,2,opt,name=rawData,proto3" json:"rawData,omitempty"`
	Signature       string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	EncryptedData   string `protobuf:"bytes,4,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"`
	Iv              string `protobuf:"bytes,5,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (m *CWxLogin) Reset()                    { *m = CWxLogin{} }
func (*CWxLogin) ProtoMessage()               {}
func (*CWxLogin) Descriptor() ([]byte, []int) { return fileDescriptorGameLogin, []int{0} }

func (m *CWxLogin) GetWithCredentials() bool {
	if m != nil {
		return m.WithCredentials
	}
	return false
}

func (m *CWxLogin) GetRawData() string {
	if m != nil {
		return m.RawData
	}
	return ""
}

func (m *CWxLogin) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *CWxLogin) GetEncryptedData() string {
	if m != nil {
		return m.EncryptedData
	}
	return ""
}

func (m *CWxLogin) GetIv() string {
	if m != nil {
		return m.Iv
	}
	return ""
}

type SWxLogin struct {
	Userid string  `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Error  ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SWxLogin) Reset()                    { *m = SWxLogin{} }
func (*SWxLogin) ProtoMessage()               {}
func (*SWxLogin) Descriptor() ([]byte, []int) { return fileDescriptorGameLogin, []int{1} }

func (m *SWxLogin) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SWxLogin) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 登出
type SLoginOut struct {
	Rtype int32 `protobuf:"varint,1,opt,name=rtype,proto3" json:"rtype,omitempty"`
}

func (m *SLoginOut) Reset()                    { *m = SLoginOut{} }
func (*SLoginOut) ProtoMessage()               {}
func (*SLoginOut) Descriptor() ([]byte, []int) { return fileDescriptorGameLogin, []int{2} }

func (m *SLoginOut) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func init() {
	proto.RegisterType((*CWxLogin)(nil), "pb.CWxLogin")
	proto.RegisterType((*SWxLogin)(nil), "pb.SWxLogin")
	proto.RegisterType((*SLoginOut)(nil), "pb.SLoginOut")
}
func (this *CWxLogin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CWxLogin)
	if !ok {
		that2, ok := that.(CWxLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WithCredentials != that1.WithCredentials {
		return false
	}
	if this.RawData != that1.RawData {
		return false
	}
	if this.Signature != that1.Signature {
		return false
	}
	if this.EncryptedData != that1.EncryptedData {
		return false
	}
	if this.Iv != that1.Iv {
		return false
	}
	return true
}
func (this *SWxLogin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SWxLogin)
	if !ok {
		that2, ok := that.(SWxLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SLoginOut) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SLoginOut)
	if !ok {
		that2, ok := that.(SLoginOut)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	return true
}
func (this *CWxLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.CWxLogin{")
	s = append(s, "WithCredentials: "+fmt.Sprintf("%#v", this.WithCredentials)+",\n")
	s = append(s, "RawData: "+fmt.Sprintf("%#v", this.RawData)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "EncryptedData: "+fmt.Sprintf("%#v", this.EncryptedData)+",\n")
	s = append(s, "Iv: "+fmt.Sprintf("%#v", this.Iv)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SWxLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SWxLogin{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SLoginOut) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SLoginOut{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGameLogin(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CWxLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CWxLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WithCredentials {
		dAtA[i] = 0x8
		i++
		if m.WithCredentials {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.RawData) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameLogin(dAtA, i, uint64(len(m.RawData)))
		i += copy(dAtA[i:], m.RawData)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameLogin(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if len(m.EncryptedData) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameLogin(dAtA, i, uint64(len(m.EncryptedData)))
		i += copy(dAtA[i:], m.EncryptedData)
	}
	if len(m.Iv) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameLogin(dAtA, i, uint64(len(m.Iv)))
		i += copy(dAtA[i:], m.Iv)
	}
	return i, nil
}

func (m *SWxLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SWxLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameLogin(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameLogin(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SLoginOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SLoginOut) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameLogin(dAtA, i, uint64(m.Rtype))
	}
	return i, nil
}

func encodeVarintGameLogin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CWxLogin) Size() (n int) {
	var l int
	_ = l
	if m.WithCredentials {
		n += 2
	}
	l = len(m.RawData)
	if l > 0 {
		n += 1 + l + sovGameLogin(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovGameLogin(uint64(l))
	}
	l = len(m.EncryptedData)
	if l > 0 {
		n += 1 + l + sovGameLogin(uint64(l))
	}
	l = len(m.Iv)
	if l > 0 {
		n += 1 + l + sovGameLogin(uint64(l))
	}
	return n
}

func (m *SWxLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameLogin(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameLogin(uint64(m.Error))
	}
	return n
}

func (m *SLoginOut) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovGameLogin(uint64(m.Rtype))
	}
	return n
}

func sovGameLogin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGameLogin(x uint64) (n int) {
	return sovGameLogin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CWxLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CWxLogin{`,
		`WithCredentials:` + fmt.Sprintf("%v", this.WithCredentials) + `,`,
		`RawData:` + fmt.Sprintf("%v", this.RawData) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`EncryptedData:` + fmt.Sprintf("%v", this.EncryptedData) + `,`,
		`Iv:` + fmt.Sprintf("%v", this.Iv) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SWxLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SWxLogin{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SLoginOut) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SLoginOut{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGameLogin(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CWxLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CWxLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CWxLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithCredentials", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithCredentials = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SWxLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SWxLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SWxLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SLoginOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SLoginOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SLoginOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameLogin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameLogin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGameLogin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGameLogin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGameLogin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGameLogin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameLogin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game_login.proto", fileDescriptorGameLogin) }

var fileDescriptorGameLogin = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4a, 0xc3, 0x40,
	0x18, 0x85, 0x33, 0xd1, 0xd4, 0xe6, 0x17, 0x5b, 0x19, 0x44, 0x82, 0xc8, 0xd0, 0x16, 0x17, 0x59,
	0x48, 0x16, 0x7a, 0x03, 0x63, 0x77, 0x82, 0x90, 0x2e, 0x5c, 0xca, 0xa4, 0x19, 0xe2, 0x40, 0xcd,
	0x84, 0x3f, 0x93, 0xd6, 0xee, 0x3c, 0x82, 0x67, 0x70, 0xe5, 0x51, 0x5c, 0x76, 0xe9, 0xd2, 0x8c,
	0x1b, 0x97, 0x3d, 0x82, 0x38, 0xb1, 0x88, 0x2e, 0xdf, 0xf7, 0xde, 0xff, 0x78, 0xfc, 0xb0, 0x9f,
	0xf3, 0x7b, 0x71, 0x3b, 0x53, 0xb9, 0x2c, 0xa2, 0x12, 0x95, 0x56, 0xd4, 0x2d, 0xd3, 0xa3, 0xbe,
	0xa5, 0x53, 0x95, 0x89, 0x16, 0x8e, 0x9e, 0x09, 0x74, 0xe3, 0x9b, 0x87, 0xab, 0xef, 0x1c, 0x0d,
	0xa1, 0xbf, 0x90, 0xfa, 0x2e, 0x46, 0x91, 0x89, 0x42, 0x4b, 0x3e, 0xab, 0x02, 0x32, 0x20, 0x61,
	0x37, 0xf9, 0x8f, 0x69, 0x00, 0x3b, 0xc8, 0x17, 0x97, 0x5c, 0xf3, 0xc0, 0x1d, 0x90, 0xd0, 0x4f,
	0x36, 0x92, 0x1e, 0x83, 0x5f, 0xc9, 0xbc, 0xe0, 0xba, 0x46, 0x11, 0x6c, 0x59, 0xef, 0x17, 0xd0,
	0x13, 0xd8, 0x13, 0xc5, 0x14, 0x97, 0xa5, 0x16, 0x99, 0xbd, 0xde, 0xb6, 0x89, 0xbf, 0x90, 0xf6,
	0xc0, 0x95, 0xf3, 0xc0, 0xb3, 0x96, 0x2b, 0xe7, 0xa3, 0x31, 0x74, 0x27, 0x9b, 0x8d, 0x87, 0xd0,
	0xa9, 0x2b, 0x81, 0x32, 0xb3, 0xd3, 0xfc, 0xe4, 0x47, 0xd1, 0x21, 0x78, 0x02, 0x51, 0xa1, 0xdd,
	0xd3, 0x3b, 0xdb, 0x8d, 0xca, 0x34, 0x1a, 0x23, 0xc6, 0x2a, 0x13, 0x49, 0xeb, 0x8c, 0x86, 0xe0,
	0x4f, 0x6c, 0xc9, 0x75, 0xad, 0xe9, 0x01, 0x78, 0xa8, 0x97, 0xa5, 0xb0, 0x35, 0x5e, 0xd2, 0x8a,
	0x8b, 0xd3, 0x55, 0xc3, 0x9c, 0xb7, 0x86, 0x39, 0xeb, 0x86, 0x91, 0x47, 0xc3, 0xc8, 0x8b, 0x61,
	0xe4, 0xd5, 0x30, 0xb2, 0x32, 0x8c, 0xbc, 0x1b, 0x46, 0x3e, 0x0d, 0x73, 0xd6, 0x86, 0x91, 0xa7,
	0x0f, 0xe6, 0xa4, 0x1d, 0xfb, 0xc3, 0xf3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0xa5, 0x5d,
	0x99, 0x6c, 0x01, 0x00, 0x00,
}
