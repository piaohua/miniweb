// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_fight.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 对战类型
type CFight struct {
}

func (m *CFight) Reset()                    { *m = CFight{} }
func (*CFight) ProtoMessage()               {}
func (*CFight) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{0} }

type SFight struct {
	Type  []FightType `protobuf:"varint,1,rep,packed,name=type,enum=pb.FightType" json:"type,omitempty"`
	Error ErrCode     `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SFight) Reset()                    { *m = SFight{} }
func (*SFight) ProtoMessage()               {}
func (*SFight) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{1} }

func (m *SFight) GetType() []FightType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *SFight) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 对战匹配
type CFightMatch struct {
	Type   FightType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.FightType" json:"type,omitempty"`
	Userid string    `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CFightMatch) Reset()                    { *m = CFightMatch{} }
func (*CFightMatch) ProtoMessage()               {}
func (*CFightMatch) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{2} }

func (m *CFightMatch) GetType() FightType {
	if m != nil {
		return m.Type
	}
	return FIGHT_TYPE0
}

func (m *CFightMatch) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SFightMatch struct {
	RoomInfo *RoomData `protobuf:"bytes,1,opt,name=roomInfo" json:"roomInfo,omitempty"`
	Error    ErrCode   `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SFightMatch) Reset()                    { *m = SFightMatch{} }
func (*SFightMatch) ProtoMessage()               {}
func (*SFightMatch) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{3} }

func (m *SFightMatch) GetRoomInfo() *RoomData {
	if m != nil {
		return m.RoomInfo
	}
	return nil
}

func (m *SFightMatch) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 对战创建
type CFightCreate struct {
	Type     FightType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.FightType" json:"type,omitempty"`
	Match    AllowType `protobuf:"varint,2,opt,name=match,proto3,enum=pb.AllowType" json:"match,omitempty"`
	UserProp AllowType `protobuf:"varint,3,opt,name=userProp,proto3,enum=pb.AllowType" json:"userProp,omitempty"`
	Userid   string    `protobuf:"bytes,4,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CFightCreate) Reset()                    { *m = CFightCreate{} }
func (*CFightCreate) ProtoMessage()               {}
func (*CFightCreate) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{4} }

func (m *CFightCreate) GetType() FightType {
	if m != nil {
		return m.Type
	}
	return FIGHT_TYPE0
}

func (m *CFightCreate) GetMatch() AllowType {
	if m != nil {
		return m.Match
	}
	return ALLOW_TYPE0
}

func (m *CFightCreate) GetUserProp() AllowType {
	if m != nil {
		return m.UserProp
	}
	return ALLOW_TYPE0
}

func (m *CFightCreate) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SFightCreate struct {
	RoomInfo *RoomData `protobuf:"bytes,1,opt,name=roomInfo" json:"roomInfo,omitempty"`
	Error    ErrCode   `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SFightCreate) Reset()                    { *m = SFightCreate{} }
func (*SFightCreate) ProtoMessage()               {}
func (*SFightCreate) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{5} }

func (m *SFightCreate) GetRoomInfo() *RoomData {
	if m != nil {
		return m.RoomInfo
	}
	return nil
}

func (m *SFightCreate) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 进入对战房间
type CFightEnter struct {
	Roomid string `protobuf:"bytes,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Userid string `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CFightEnter) Reset()                    { *m = CFightEnter{} }
func (*CFightEnter) ProtoMessage()               {}
func (*CFightEnter) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{6} }

func (m *CFightEnter) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *CFightEnter) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SFightEnter struct {
	RoomInfo *RoomData `protobuf:"bytes,1,opt,name=roomInfo" json:"roomInfo,omitempty"`
	Error    ErrCode   `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SFightEnter) Reset()                    { *m = SFightEnter{} }
func (*SFightEnter) ProtoMessage()               {}
func (*SFightEnter) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{7} }

func (m *SFightEnter) GetRoomInfo() *RoomData {
	if m != nil {
		return m.RoomInfo
	}
	return nil
}

func (m *SFightEnter) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 房间玩家数据更新
type SFightUser struct {
	RoomInfo *RoomData `protobuf:"bytes,1,opt,name=roomInfo" json:"roomInfo,omitempty"`
}

func (m *SFightUser) Reset()                    { *m = SFightUser{} }
func (*SFightUser) ProtoMessage()               {}
func (*SFightUser) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{8} }

func (m *SFightUser) GetRoomInfo() *RoomData {
	if m != nil {
		return m.RoomInfo
	}
	return nil
}

// 进入匹配房间之后, 也可以修改设置, 修改成功,可以通过SFightUser更新信息
type CFightChangeSet struct {
	Match    AllowType `protobuf:"varint,1,opt,name=match,proto3,enum=pb.AllowType" json:"match,omitempty"`
	UserProp AllowType `protobuf:"varint,2,opt,name=userProp,proto3,enum=pb.AllowType" json:"userProp,omitempty"`
	Roomid   string    `protobuf:"bytes,3,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Userid   string    `protobuf:"bytes,4,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CFightChangeSet) Reset()                    { *m = CFightChangeSet{} }
func (*CFightChangeSet) ProtoMessage()               {}
func (*CFightChangeSet) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{9} }

func (m *CFightChangeSet) GetMatch() AllowType {
	if m != nil {
		return m.Match
	}
	return ALLOW_TYPE0
}

func (m *CFightChangeSet) GetUserProp() AllowType {
	if m != nil {
		return m.UserProp
	}
	return ALLOW_TYPE0
}

func (m *CFightChangeSet) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *CFightChangeSet) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

// 退出匹配
type CFightMatchExit struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CFightMatchExit) Reset()                    { *m = CFightMatchExit{} }
func (*CFightMatchExit) ProtoMessage()               {}
func (*CFightMatchExit) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{10} }

func (m *CFightMatchExit) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SFightMatchExit struct {
	UserInfo *RoomUser `protobuf:"bytes,1,opt,name=userInfo" json:"userInfo,omitempty"`
	Error    ErrCode   `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SFightMatchExit) Reset()                    { *m = SFightMatchExit{} }
func (*SFightMatchExit) ProtoMessage()               {}
func (*SFightMatchExit) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{11} }

func (m *SFightMatchExit) GetUserInfo() *RoomUser {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *SFightMatchExit) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 房主开始游戏
type CFightStart struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CFightStart) Reset()                    { *m = CFightStart{} }
func (*CFightStart) ProtoMessage()               {}
func (*CFightStart) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{12} }

func (m *CFightStart) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SFightStart struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SFightStart) Reset()                    { *m = SFightStart{} }
func (*SFightStart) ProtoMessage()               {}
func (*SFightStart) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{13} }

func (m *SFightStart) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 消除水果
type CFightingCancelGird struct {
	StartPosition int32  `protobuf:"varint,1,opt,name=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   int32  `protobuf:"varint,2,opt,name=endPosition,proto3" json:"endPosition,omitempty"`
	Userid        string `protobuf:"bytes,3,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CFightingCancelGird) Reset()                    { *m = CFightingCancelGird{} }
func (*CFightingCancelGird) ProtoMessage()               {}
func (*CFightingCancelGird) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{14} }

func (m *CFightingCancelGird) GetStartPosition() int32 {
	if m != nil {
		return m.StartPosition
	}
	return 0
}

func (m *CFightingCancelGird) GetEndPosition() int32 {
	if m != nil {
		return m.EndPosition
	}
	return 0
}

func (m *CFightingCancelGird) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SFightingCancelGird struct {
	Userid        string  `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	StartPosition int32   `protobuf:"varint,2,opt,name=startPosition,proto3" json:"startPosition,omitempty"`
	EndPosition   int32   `protobuf:"varint,3,opt,name=endPosition,proto3" json:"endPosition,omitempty"`
	Error         ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SFightingCancelGird) Reset()                    { *m = SFightingCancelGird{} }
func (*SFightingCancelGird) ProtoMessage()               {}
func (*SFightingCancelGird) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{15} }

func (m *SFightingCancelGird) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SFightingCancelGird) GetStartPosition() int32 {
	if m != nil {
		return m.StartPosition
	}
	return 0
}

func (m *SFightingCancelGird) GetEndPosition() int32 {
	if m != nil {
		return m.EndPosition
	}
	return 0
}

func (m *SFightingCancelGird) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 广播自己的积分
type CFightingScore struct {
	Score  int32  `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	Userid string `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CFightingScore) Reset()                    { *m = CFightingScore{} }
func (*CFightingScore) ProtoMessage()               {}
func (*CFightingScore) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{16} }

func (m *CFightingScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *CFightingScore) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SFightingScore struct {
	Userid string  `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Score  int32   `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Error  ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SFightingScore) Reset()                    { *m = SFightingScore{} }
func (*SFightingScore) ProtoMessage()               {}
func (*SFightingScore) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{17} }

func (m *SFightingScore) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SFightingScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *SFightingScore) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 战斗结束
type CFightingEnd struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CFightingEnd) Reset()                    { *m = CFightingEnd{} }
func (*CFightingEnd) ProtoMessage()               {}
func (*CFightingEnd) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{18} }

func (m *CFightingEnd) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SFightingEnd struct {
	Userid string  `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Error  ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SFightingEnd) Reset()                    { *m = SFightingEnd{} }
func (*SFightingEnd) ProtoMessage()               {}
func (*SFightingEnd) Descriptor() ([]byte, []int) { return fileDescriptorGameFight, []int{19} }

func (m *SFightingEnd) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SFightingEnd) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*CFight)(nil), "pb.CFight")
	proto.RegisterType((*SFight)(nil), "pb.SFight")
	proto.RegisterType((*CFightMatch)(nil), "pb.CFightMatch")
	proto.RegisterType((*SFightMatch)(nil), "pb.SFightMatch")
	proto.RegisterType((*CFightCreate)(nil), "pb.CFightCreate")
	proto.RegisterType((*SFightCreate)(nil), "pb.SFightCreate")
	proto.RegisterType((*CFightEnter)(nil), "pb.CFightEnter")
	proto.RegisterType((*SFightEnter)(nil), "pb.SFightEnter")
	proto.RegisterType((*SFightUser)(nil), "pb.SFightUser")
	proto.RegisterType((*CFightChangeSet)(nil), "pb.CFightChangeSet")
	proto.RegisterType((*CFightMatchExit)(nil), "pb.CFightMatchExit")
	proto.RegisterType((*SFightMatchExit)(nil), "pb.SFightMatchExit")
	proto.RegisterType((*CFightStart)(nil), "pb.CFightStart")
	proto.RegisterType((*SFightStart)(nil), "pb.SFightStart")
	proto.RegisterType((*CFightingCancelGird)(nil), "pb.CFightingCancelGird")
	proto.RegisterType((*SFightingCancelGird)(nil), "pb.SFightingCancelGird")
	proto.RegisterType((*CFightingScore)(nil), "pb.CFightingScore")
	proto.RegisterType((*SFightingScore)(nil), "pb.SFightingScore")
	proto.RegisterType((*CFightingEnd)(nil), "pb.CFightingEnd")
	proto.RegisterType((*SFightingEnd)(nil), "pb.SFightingEnd")
}
func (this *CFight) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CFight)
	if !ok {
		that2, ok := that.(CFight)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SFight) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFight)
	if !ok {
		that2, ok := that.(SFight)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Type) != len(that1.Type) {
		return false
	}
	for i := range this.Type {
		if this.Type[i] != that1.Type[i] {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CFightMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CFightMatch)
	if !ok {
		that2, ok := that.(CFightMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SFightMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFightMatch)
	if !ok {
		that2, ok := that.(SFightMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoomInfo.Equal(that1.RoomInfo) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CFightCreate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CFightCreate)
	if !ok {
		that2, ok := that.(CFightCreate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Match != that1.Match {
		return false
	}
	if this.UserProp != that1.UserProp {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SFightCreate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFightCreate)
	if !ok {
		that2, ok := that.(SFightCreate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoomInfo.Equal(that1.RoomInfo) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CFightEnter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CFightEnter)
	if !ok {
		that2, ok := that.(CFightEnter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SFightEnter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFightEnter)
	if !ok {
		that2, ok := that.(SFightEnter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoomInfo.Equal(that1.RoomInfo) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SFightUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFightUser)
	if !ok {
		that2, ok := that.(SFightUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoomInfo.Equal(that1.RoomInfo) {
		return false
	}
	return true
}
func (this *CFightChangeSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CFightChangeSet)
	if !ok {
		that2, ok := that.(CFightChangeSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Match != that1.Match {
		return false
	}
	if this.UserProp != that1.UserProp {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *CFightMatchExit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CFightMatchExit)
	if !ok {
		that2, ok := that.(CFightMatchExit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SFightMatchExit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFightMatchExit)
	if !ok {
		that2, ok := that.(SFightMatchExit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserInfo.Equal(that1.UserInfo) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CFightStart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CFightStart)
	if !ok {
		that2, ok := that.(CFightStart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SFightStart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFightStart)
	if !ok {
		that2, ok := that.(SFightStart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CFightingCancelGird) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CFightingCancelGird)
	if !ok {
		that2, ok := that.(CFightingCancelGird)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartPosition != that1.StartPosition {
		return false
	}
	if this.EndPosition != that1.EndPosition {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SFightingCancelGird) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFightingCancelGird)
	if !ok {
		that2, ok := that.(SFightingCancelGird)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.StartPosition != that1.StartPosition {
		return false
	}
	if this.EndPosition != that1.EndPosition {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CFightingScore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CFightingScore)
	if !ok {
		that2, ok := that.(CFightingScore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SFightingScore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFightingScore)
	if !ok {
		that2, ok := that.(SFightingScore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CFightingEnd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CFightingEnd)
	if !ok {
		that2, ok := that.(CFightingEnd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SFightingEnd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFightingEnd)
	if !ok {
		that2, ok := that.(SFightingEnd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CFight) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CFight{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFight) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SFight{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CFightMatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CFightMatch{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFightMatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SFightMatch{")
	if this.RoomInfo != nil {
		s = append(s, "RoomInfo: "+fmt.Sprintf("%#v", this.RoomInfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CFightCreate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CFightCreate{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	s = append(s, "UserProp: "+fmt.Sprintf("%#v", this.UserProp)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFightCreate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SFightCreate{")
	if this.RoomInfo != nil {
		s = append(s, "RoomInfo: "+fmt.Sprintf("%#v", this.RoomInfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CFightEnter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CFightEnter{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFightEnter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SFightEnter{")
	if this.RoomInfo != nil {
		s = append(s, "RoomInfo: "+fmt.Sprintf("%#v", this.RoomInfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFightUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SFightUser{")
	if this.RoomInfo != nil {
		s = append(s, "RoomInfo: "+fmt.Sprintf("%#v", this.RoomInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CFightChangeSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CFightChangeSet{")
	s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	s = append(s, "UserProp: "+fmt.Sprintf("%#v", this.UserProp)+",\n")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CFightMatchExit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CFightMatchExit{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFightMatchExit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SFightMatchExit{")
	if this.UserInfo != nil {
		s = append(s, "UserInfo: "+fmt.Sprintf("%#v", this.UserInfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CFightStart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CFightStart{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFightStart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SFightStart{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CFightingCancelGird) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CFightingCancelGird{")
	s = append(s, "StartPosition: "+fmt.Sprintf("%#v", this.StartPosition)+",\n")
	s = append(s, "EndPosition: "+fmt.Sprintf("%#v", this.EndPosition)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFightingCancelGird) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SFightingCancelGird{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "StartPosition: "+fmt.Sprintf("%#v", this.StartPosition)+",\n")
	s = append(s, "EndPosition: "+fmt.Sprintf("%#v", this.EndPosition)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CFightingScore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CFightingScore{")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFightingScore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SFightingScore{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CFightingEnd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CFightingEnd{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFightingEnd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SFightingEnd{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGameFight(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CFight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SFight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA2 := make([]byte, len(m.Type)*10)
		var j1 int
		for _, num := range m.Type {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CFightMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFightMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Type))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SFightMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFightMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.RoomInfo.Size()))
		n3, err := m.RoomInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CFightCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFightCreate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Type))
	}
	if m.Match != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Match))
	}
	if m.UserProp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.UserProp))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SFightCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFightCreate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.RoomInfo.Size()))
		n4, err := m.RoomInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CFightEnter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFightEnter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SFightEnter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFightEnter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.RoomInfo.Size()))
		n5, err := m.RoomInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SFightUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFightUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.RoomInfo.Size()))
		n6, err := m.RoomInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *CFightChangeSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFightChangeSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Match != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Match))
	}
	if m.UserProp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.UserProp))
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *CFightMatchExit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFightMatchExit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SFightMatchExit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFightMatchExit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.UserInfo.Size()))
		n7, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CFightStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFightStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SFightStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFightStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CFightingCancelGird) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFightingCancelGird) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartPosition != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.StartPosition))
	}
	if m.EndPosition != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.EndPosition))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SFightingCancelGird) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFightingCancelGird) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.StartPosition != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.StartPosition))
	}
	if m.EndPosition != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.EndPosition))
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CFightingScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFightingScore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Score))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SFightingScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFightingScore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Score))
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CFightingEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFightingEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SFightingEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFightingEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameFight(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintGameFight(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CFight) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SFight) Size() (n int) {
	var l int
	_ = l
	if len(m.Type) > 0 {
		l = 0
		for _, e := range m.Type {
			l += sovGameFight(uint64(e))
		}
		n += 1 + sovGameFight(uint64(l)) + l
	}
	if m.Error != 0 {
		n += 1 + sovGameFight(uint64(m.Error))
	}
	return n
}

func (m *CFightMatch) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGameFight(uint64(m.Type))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	return n
}

func (m *SFightMatch) Size() (n int) {
	var l int
	_ = l
	if m.RoomInfo != nil {
		l = m.RoomInfo.Size()
		n += 1 + l + sovGameFight(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameFight(uint64(m.Error))
	}
	return n
}

func (m *CFightCreate) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGameFight(uint64(m.Type))
	}
	if m.Match != 0 {
		n += 1 + sovGameFight(uint64(m.Match))
	}
	if m.UserProp != 0 {
		n += 1 + sovGameFight(uint64(m.UserProp))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	return n
}

func (m *SFightCreate) Size() (n int) {
	var l int
	_ = l
	if m.RoomInfo != nil {
		l = m.RoomInfo.Size()
		n += 1 + l + sovGameFight(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameFight(uint64(m.Error))
	}
	return n
}

func (m *CFightEnter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	return n
}

func (m *SFightEnter) Size() (n int) {
	var l int
	_ = l
	if m.RoomInfo != nil {
		l = m.RoomInfo.Size()
		n += 1 + l + sovGameFight(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameFight(uint64(m.Error))
	}
	return n
}

func (m *SFightUser) Size() (n int) {
	var l int
	_ = l
	if m.RoomInfo != nil {
		l = m.RoomInfo.Size()
		n += 1 + l + sovGameFight(uint64(l))
	}
	return n
}

func (m *CFightChangeSet) Size() (n int) {
	var l int
	_ = l
	if m.Match != 0 {
		n += 1 + sovGameFight(uint64(m.Match))
	}
	if m.UserProp != 0 {
		n += 1 + sovGameFight(uint64(m.UserProp))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	return n
}

func (m *CFightMatchExit) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	return n
}

func (m *SFightMatchExit) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovGameFight(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameFight(uint64(m.Error))
	}
	return n
}

func (m *CFightStart) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	return n
}

func (m *SFightStart) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovGameFight(uint64(m.Error))
	}
	return n
}

func (m *CFightingCancelGird) Size() (n int) {
	var l int
	_ = l
	if m.StartPosition != 0 {
		n += 1 + sovGameFight(uint64(m.StartPosition))
	}
	if m.EndPosition != 0 {
		n += 1 + sovGameFight(uint64(m.EndPosition))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	return n
}

func (m *SFightingCancelGird) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	if m.StartPosition != 0 {
		n += 1 + sovGameFight(uint64(m.StartPosition))
	}
	if m.EndPosition != 0 {
		n += 1 + sovGameFight(uint64(m.EndPosition))
	}
	if m.Error != 0 {
		n += 1 + sovGameFight(uint64(m.Error))
	}
	return n
}

func (m *CFightingScore) Size() (n int) {
	var l int
	_ = l
	if m.Score != 0 {
		n += 1 + sovGameFight(uint64(m.Score))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	return n
}

func (m *SFightingScore) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovGameFight(uint64(m.Score))
	}
	if m.Error != 0 {
		n += 1 + sovGameFight(uint64(m.Error))
	}
	return n
}

func (m *CFightingEnd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	return n
}

func (m *SFightingEnd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameFight(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameFight(uint64(m.Error))
	}
	return n
}

func sovGameFight(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGameFight(x uint64) (n int) {
	return sovGameFight(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CFight) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFight{`,
		`}`,
	}, "")
	return s
}
func (this *SFight) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFight{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFightMatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFightMatch{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFightMatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFightMatch{`,
		`RoomInfo:` + strings.Replace(fmt.Sprintf("%v", this.RoomInfo), "RoomData", "RoomData", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFightCreate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFightCreate{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Match:` + fmt.Sprintf("%v", this.Match) + `,`,
		`UserProp:` + fmt.Sprintf("%v", this.UserProp) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFightCreate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFightCreate{`,
		`RoomInfo:` + strings.Replace(fmt.Sprintf("%v", this.RoomInfo), "RoomData", "RoomData", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFightEnter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFightEnter{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFightEnter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFightEnter{`,
		`RoomInfo:` + strings.Replace(fmt.Sprintf("%v", this.RoomInfo), "RoomData", "RoomData", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFightUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFightUser{`,
		`RoomInfo:` + strings.Replace(fmt.Sprintf("%v", this.RoomInfo), "RoomData", "RoomData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFightChangeSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFightChangeSet{`,
		`Match:` + fmt.Sprintf("%v", this.Match) + `,`,
		`UserProp:` + fmt.Sprintf("%v", this.UserProp) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFightMatchExit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFightMatchExit{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFightMatchExit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFightMatchExit{`,
		`UserInfo:` + strings.Replace(fmt.Sprintf("%v", this.UserInfo), "RoomUser", "RoomUser", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFightStart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFightStart{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFightStart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFightStart{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFightingCancelGird) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFightingCancelGird{`,
		`StartPosition:` + fmt.Sprintf("%v", this.StartPosition) + `,`,
		`EndPosition:` + fmt.Sprintf("%v", this.EndPosition) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFightingCancelGird) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFightingCancelGird{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`StartPosition:` + fmt.Sprintf("%v", this.StartPosition) + `,`,
		`EndPosition:` + fmt.Sprintf("%v", this.EndPosition) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFightingScore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFightingScore{`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFightingScore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFightingScore{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFightingEnd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFightingEnd{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFightingEnd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFightingEnd{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGameFight(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CFight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v FightType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameFight
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (FightType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Type = append(m.Type, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameFight
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameFight
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v FightType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameFight
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (FightType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Type = append(m.Type, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFightMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFightMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFightMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (FightType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFightMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFightMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFightMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomInfo == nil {
				m.RoomInfo = &RoomData{}
			}
			if err := m.RoomInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFightCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFightCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFightCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (FightType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			m.Match = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Match |= (AllowType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserProp", wireType)
			}
			m.UserProp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserProp |= (AllowType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFightCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFightCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFightCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomInfo == nil {
				m.RoomInfo = &RoomData{}
			}
			if err := m.RoomInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFightEnter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFightEnter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFightEnter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFightEnter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFightEnter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFightEnter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomInfo == nil {
				m.RoomInfo = &RoomData{}
			}
			if err := m.RoomInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFightUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFightUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFightUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomInfo == nil {
				m.RoomInfo = &RoomData{}
			}
			if err := m.RoomInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFightChangeSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFightChangeSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFightChangeSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			m.Match = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Match |= (AllowType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserProp", wireType)
			}
			m.UserProp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserProp |= (AllowType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFightMatchExit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFightMatchExit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFightMatchExit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFightMatchExit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFightMatchExit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFightMatchExit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &RoomUser{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFightStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFightStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFightStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFightStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFightStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFightStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFightingCancelGird) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFightingCancelGird: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFightingCancelGird: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosition", wireType)
			}
			m.StartPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPosition |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPosition", wireType)
			}
			m.EndPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndPosition |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFightingCancelGird) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFightingCancelGird: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFightingCancelGird: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosition", wireType)
			}
			m.StartPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPosition |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPosition", wireType)
			}
			m.EndPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndPosition |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFightingScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFightingScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFightingScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFightingScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFightingScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFightingScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFightingEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFightingEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFightingEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFightingEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFightingEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFightingEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameFight(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameFight
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameFight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGameFight
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGameFight
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGameFight(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGameFight = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameFight   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game_fight.proto", fileDescriptorGameFight) }

var fileDescriptorGameFight = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0x76, 0x12, 0xa5, 0x93, 0x34, 0x41, 0x2e, 0x42, 0x51, 0x0f, 0xab, 0xd4, 0xfc,
	0x51, 0x2a, 0xa1, 0x08, 0x05, 0x89, 0x1b, 0x48, 0x10, 0x02, 0xf4, 0x00, 0xaa, 0x6c, 0xb8, 0x80,
	0x04, 0x72, 0xe2, 0x6d, 0x62, 0x29, 0xf1, 0x5a, 0xeb, 0x8d, 0xa0, 0x37, 0x1e, 0x01, 0x6e, 0xf0,
	0x06, 0x3c, 0x0a, 0xc7, 0x1e, 0x39, 0x12, 0x73, 0xe1, 0xd8, 0x47, 0x40, 0xbb, 0x6b, 0x1b, 0x9b,
	0xc6, 0xd4, 0x95, 0x7a, 0xf3, 0xce, 0x7c, 0xfb, 0xeb, 0x37, 0xf3, 0xb9, 0x0e, 0x5c, 0x99, 0x39,
	0x4b, 0xf2, 0xee, 0xc8, 0x9b, 0xcd, 0xf9, 0x20, 0x60, 0x94, 0x53, 0x43, 0x0b, 0x26, 0xbb, 0x1d,
	0x59, 0x9d, 0x52, 0x97, 0xa8, 0xe2, 0x6e, 0x5b, 0x16, 0x82, 0xd5, 0x24, 0x3e, 0x2b, 0x01, 0x3f,
	0x0e, 0x62, 0x81, 0xd9, 0x80, 0xfa, 0xe8, 0x89, 0xa0, 0x98, 0x2f, 0xa0, 0x6e, 0xcb, 0x27, 0x63,
	0x0f, 0xaa, 0x42, 0xd1, 0x45, 0x3d, 0xbd, 0xdf, 0x1e, 0x6e, 0x0f, 0x82, 0xc9, 0x40, 0x36, 0x5e,
	0x1e, 0x07, 0xc4, 0x92, 0x2d, 0x63, 0x0f, 0x6a, 0x84, 0x31, 0xca, 0xba, 0x5a, 0x0f, 0xf5, 0xdb,
	0xc3, 0xa6, 0xd0, 0x8c, 0x19, 0x1b, 0x51, 0x97, 0x58, 0xaa, 0x63, 0x3e, 0x83, 0xa6, 0x22, 0x3f,
	0x77, 0xf8, 0x74, 0x9e, 0x81, 0xa2, 0x22, 0xe8, 0x35, 0xa8, 0xaf, 0x42, 0xc2, 0x3c, 0x57, 0x52,
	0xb7, 0xac, 0xf8, 0x64, 0xbe, 0x86, 0xa6, 0x9d, 0x21, 0xf5, 0xa1, 0xc1, 0x28, 0x5d, 0x1e, 0xf8,
	0x47, 0x54, 0xd2, 0x9a, 0xc3, 0x96, 0xa0, 0x59, 0x94, 0x2e, 0x1f, 0x3b, 0xdc, 0xb1, 0xd2, 0x6e,
	0x19, 0x97, 0x5f, 0x11, 0xb4, 0x94, 0xcd, 0x11, 0x23, 0x0e, 0x27, 0x65, 0x7c, 0x5e, 0x87, 0xda,
	0x52, 0x38, 0x89, 0xb1, 0x52, 0xf3, 0x70, 0xb1, 0xa0, 0xef, 0xa5, 0x46, 0xf5, 0x8c, 0x7d, 0x68,
	0x08, 0xfb, 0x87, 0x8c, 0x06, 0x5d, 0x7d, 0x93, 0x2e, 0x6d, 0x67, 0xe6, 0xae, 0xe6, 0xe6, 0x7e,
	0x03, 0x2d, 0x3b, 0x6b, 0xed, 0x52, 0x07, 0xbf, 0x9f, 0xc4, 0x33, 0xf6, 0x39, 0x61, 0xc2, 0x83,
	0xb8, 0xed, 0xb9, 0x92, 0xbc, 0x65, 0xc5, 0xa7, 0xf3, 0x33, 0x51, 0xd7, 0x2f, 0xd5, 0xda, 0x3d,
	0x00, 0xc5, 0x7e, 0x15, 0x5e, 0x04, 0x6d, 0x7e, 0x46, 0xd0, 0x89, 0xb3, 0x9c, 0x3b, 0xfe, 0x8c,
	0xd8, 0x84, 0xff, 0xcd, 0x0a, 0x95, 0xcc, 0x4a, 0x3b, 0x37, 0xab, 0x78, 0x4f, 0x7a, 0xc1, 0x9e,
	0xf2, 0x19, 0xee, 0x27, 0x96, 0xe4, 0xbb, 0x3b, 0xfe, 0xe0, 0xf1, 0x8c, 0x14, 0xe5, 0xa4, 0x6f,
	0xa1, 0x63, 0xff, 0x23, 0xed, 0x2b, 0x63, 0x9b, 0x66, 0x17, 0xbb, 0xb1, 0xd2, 0x6e, 0x99, 0xb5,
	0xde, 0x4c, 0x12, 0xb7, 0xb9, 0xc3, 0x8a, 0x6d, 0xdc, 0x49, 0x92, 0x55, 0xb2, 0x14, 0x8c, 0x0a,
	0xc1, 0x2b, 0xd8, 0x51, 0x60, 0xcf, 0x9f, 0x8d, 0x1c, 0x7f, 0x4a, 0x16, 0x4f, 0x3d, 0xe6, 0x1a,
	0x37, 0x60, 0x3b, 0x14, 0x88, 0x43, 0x1a, 0x7a, 0xdc, 0xa3, 0xbe, 0x24, 0xd4, 0xac, 0x7c, 0xd1,
	0xe8, 0x41, 0x93, 0xf8, 0x6e, 0xaa, 0xd1, 0xa4, 0x26, 0x5b, 0xca, 0x18, 0xd5, 0x73, 0x46, 0xbf,
	0x20, 0xd8, 0xb1, 0x37, 0xfc, 0xdd, 0x82, 0xc1, 0xce, 0xfa, 0xd1, 0x4a, 0xf8, 0xd1, 0xcf, 0xfa,
	0x49, 0x37, 0x52, 0x2d, 0xdc, 0xc8, 0x03, 0x68, 0xa7, 0x1b, 0xb1, 0xa7, 0x94, 0x11, 0xe3, 0x2a,
	0xd4, 0x42, 0xf1, 0x10, 0x2f, 0x41, 0x1d, 0x0a, 0xff, 0xbb, 0x1c, 0x68, 0xdb, 0xf9, 0xfb, 0x45,
	0x43, 0xa5, 0x5c, 0x2d, 0xcb, 0x4d, 0x2d, 0xea, 0x85, 0x16, 0x6f, 0x25, 0xdf, 0x3d, 0xcf, 0x9f,
	0x8d, 0xfd, 0xc2, 0xad, 0x99, 0x07, 0xc9, 0x47, 0xe8, 0xff, 0xba, 0x12, 0x2f, 0xe0, 0xa3, 0xdb,
	0x27, 0x6b, 0x5c, 0xf9, 0xb1, 0xc6, 0x95, 0xd3, 0x35, 0x46, 0x1f, 0x23, 0x8c, 0xbe, 0x45, 0x18,
	0x7d, 0x8f, 0x30, 0x3a, 0x89, 0x30, 0xfa, 0x19, 0x61, 0xf4, 0x3b, 0xc2, 0x95, 0xd3, 0x08, 0xa3,
	0x4f, 0xbf, 0x70, 0x65, 0x52, 0x97, 0x3f, 0x50, 0x77, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x24,
	0xea, 0xb8, 0xeb, 0xea, 0x06, 0x00, 0x00,
}
