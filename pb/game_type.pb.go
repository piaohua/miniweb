// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_type.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 日志操作类型
type LogType int32

const (
	LOG_TYPE0 LogType = 0
	LOG_TYPE1 LogType = 1
	LOG_TYPE2 LogType = 2
	LOG_TYPE3 LogType = 3
	LOG_TYPE4 LogType = 4
	LOG_TYPE5 LogType = 5
)

var LogType_name = map[int32]string{
	0: "LOG_TYPE0",
	1: "LOG_TYPE1",
	2: "LOG_TYPE2",
	3: "LOG_TYPE3",
	4: "LOG_TYPE4",
	5: "LOG_TYPE5",
}
var LogType_value = map[string]int32{
	"LOG_TYPE0": 0,
	"LOG_TYPE1": 1,
	"LOG_TYPE2": 2,
	"LOG_TYPE3": 3,
	"LOG_TYPE4": 4,
	"LOG_TYPE5": 5,
}

func (LogType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{0} }

// 关卡类型
type GateType int32

const (
	GATE_TYPE0 GateType = 0
	GATE_TYPE1 GateType = 1
	GATE_TYPE2 GateType = 2
)

var GateType_name = map[int32]string{
	0: "GATE_TYPE0",
	1: "GATE_TYPE1",
	2: "GATE_TYPE2",
}
var GateType_value = map[string]int32{
	"GATE_TYPE0": 0,
	"GATE_TYPE1": 1,
	"GATE_TYPE2": 2,
}

func (GateType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{1} }

// 登出类型
type OutType int32

const (
	OUT_TYPE0 OutType = 0
	OUT_TYPE1 OutType = 1
	OUT_TYPE2 OutType = 2
)

var OutType_name = map[int32]string{
	0: "OUT_TYPE0",
	1: "OUT_TYPE1",
	2: "OUT_TYPE2",
}
var OutType_value = map[string]int32{
	"OUT_TYPE0": 0,
	"OUT_TYPE1": 1,
	"OUT_TYPE2": 2,
}

func (OutType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{2} }

// 道具类型
type PropType int32

const (
	PROP_TYPE0  PropType = 0
	PROP_TYPE1  PropType = 1
	PROP_TYPE2  PropType = 2
	PROP_TYPE3  PropType = 3
	PROP_TYPE4  PropType = 4
	PROP_TYPE5  PropType = 5
	PROP_TYPE6  PropType = 6
	PROP_TYPE7  PropType = 7
	PROP_TYPE8  PropType = 8
	PROP_TYPE9  PropType = 9
	PROP_TYPE10 PropType = 10
	PROP_TYPE11 PropType = 11
	PROP_TYPE12 PropType = 12
	PROP_TYPE13 PropType = 13
	PROP_TYPE14 PropType = 14
)

var PropType_name = map[int32]string{
	0:  "PROP_TYPE0",
	1:  "PROP_TYPE1",
	2:  "PROP_TYPE2",
	3:  "PROP_TYPE3",
	4:  "PROP_TYPE4",
	5:  "PROP_TYPE5",
	6:  "PROP_TYPE6",
	7:  "PROP_TYPE7",
	8:  "PROP_TYPE8",
	9:  "PROP_TYPE9",
	10: "PROP_TYPE10",
	11: "PROP_TYPE11",
	12: "PROP_TYPE12",
	13: "PROP_TYPE13",
	14: "PROP_TYPE14",
}
var PropType_value = map[string]int32{
	"PROP_TYPE0":  0,
	"PROP_TYPE1":  1,
	"PROP_TYPE2":  2,
	"PROP_TYPE3":  3,
	"PROP_TYPE4":  4,
	"PROP_TYPE5":  5,
	"PROP_TYPE6":  6,
	"PROP_TYPE7":  7,
	"PROP_TYPE8":  8,
	"PROP_TYPE9":  9,
	"PROP_TYPE10": 10,
	"PROP_TYPE11": 11,
	"PROP_TYPE12": 12,
	"PROP_TYPE13": 13,
	"PROP_TYPE14": 14,
}

func (PropType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{3} }

// 支付方式
type PayWay int32

const (
	PAY_WAY0 PayWay = 0
	PAY_WAY1 PayWay = 1
	PAY_WAY2 PayWay = 2
)

var PayWay_name = map[int32]string{
	0: "PAY_WAY0",
	1: "PAY_WAY1",
	2: "PAY_WAY2",
}
var PayWay_value = map[string]int32{
	"PAY_WAY0": 0,
	"PAY_WAY1": 1,
	"PAY_WAY2": 2,
}

func (PayWay) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{4} }

// 商品状态
type ShopStatus int32

const (
	SHOP_STATUS0 ShopStatus = 0
	SHOP_STATUS1 ShopStatus = 1
	SHOP_STATUS2 ShopStatus = 2
	SHOP_STATUS3 ShopStatus = 3
	SHOP_STATUS4 ShopStatus = 4
)

var ShopStatus_name = map[int32]string{
	0: "SHOP_STATUS0",
	1: "SHOP_STATUS1",
	2: "SHOP_STATUS2",
	3: "SHOP_STATUS3",
	4: "SHOP_STATUS4",
}
var ShopStatus_value = map[string]int32{
	"SHOP_STATUS0": 0,
	"SHOP_STATUS1": 1,
	"SHOP_STATUS2": 2,
	"SHOP_STATUS3": 3,
	"SHOP_STATUS4": 4,
}

func (ShopStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{5} }

// 奖励类型
type PrizeType int32

const (
	PrizeSelect PrizeType = 0
	PrizeDraw   PrizeType = 1
)

var PrizeType_name = map[int32]string{
	0: "PrizeSelect",
	1: "PrizeDraw",
}
var PrizeType_value = map[string]int32{
	"PrizeSelect": 0,
	"PrizeDraw":   1,
}

func (PrizeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{6} }

// 邀请好友设定
type InviteType int32

const (
	InviteToday InviteType = 0
	InviteCount InviteType = 1
)

var InviteType_name = map[int32]string{
	0: "InviteToday",
	1: "InviteCount",
}
var InviteType_value = map[string]int32{
	"InviteToday": 0,
	"InviteCount": 1,
}

func (InviteType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{7} }

// 奖励状态
type PrizeStatus int32

const (
	PrizeNone PrizeStatus = 0
	PrizeDone PrizeStatus = 1
	PrizeGot  PrizeStatus = 2
)

var PrizeStatus_name = map[int32]string{
	0: "PrizeNone",
	1: "PrizeDone",
	2: "PrizeGot",
}
var PrizeStatus_value = map[string]int32{
	"PrizeNone": 0,
	"PrizeDone": 1,
	"PrizeGot":  2,
}

func (PrizeStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{8} }

// 对战类型
type FightType int32

const (
	FIGHT_TYPE0 FightType = 0
	FIGHT_TYPE1 FightType = 1
	FIGHT_TYPE2 FightType = 2
	FIGHT_TYPE3 FightType = 3
)

var FightType_name = map[int32]string{
	0: "FIGHT_TYPE0",
	1: "FIGHT_TYPE1",
	2: "FIGHT_TYPE2",
	3: "FIGHT_TYPE3",
}
var FightType_value = map[string]int32{
	"FIGHT_TYPE0": 0,
	"FIGHT_TYPE1": 1,
	"FIGHT_TYPE2": 2,
	"FIGHT_TYPE3": 3,
}

func (FightType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{9} }

// 允许自动匹配
type AllowType int32

const (
	ALLOW_TYPE0 AllowType = 0
	ALLOW_TYPE1 AllowType = 1
)

var AllowType_name = map[int32]string{
	0: "ALLOW_TYPE0",
	1: "ALLOW_TYPE1",
}
var AllowType_value = map[string]int32{
	"ALLOW_TYPE0": 0,
	"ALLOW_TYPE1": 1,
}

func (AllowType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGameType, []int{10} }

func init() {
	proto.RegisterEnum("pb.LogType", LogType_name, LogType_value)
	proto.RegisterEnum("pb.GateType", GateType_name, GateType_value)
	proto.RegisterEnum("pb.OutType", OutType_name, OutType_value)
	proto.RegisterEnum("pb.PropType", PropType_name, PropType_value)
	proto.RegisterEnum("pb.PayWay", PayWay_name, PayWay_value)
	proto.RegisterEnum("pb.ShopStatus", ShopStatus_name, ShopStatus_value)
	proto.RegisterEnum("pb.PrizeType", PrizeType_name, PrizeType_value)
	proto.RegisterEnum("pb.InviteType", InviteType_name, InviteType_value)
	proto.RegisterEnum("pb.PrizeStatus", PrizeStatus_name, PrizeStatus_value)
	proto.RegisterEnum("pb.FightType", FightType_name, FightType_value)
	proto.RegisterEnum("pb.AllowType", AllowType_name, AllowType_value)
}
func (x LogType) String() string {
	s, ok := LogType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GateType) String() string {
	s, ok := GateType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OutType) String() string {
	s, ok := OutType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PropType) String() string {
	s, ok := PropType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PayWay) String() string {
	s, ok := PayWay_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ShopStatus) String() string {
	s, ok := ShopStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PrizeType) String() string {
	s, ok := PrizeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x InviteType) String() string {
	s, ok := InviteType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PrizeStatus) String() string {
	s, ok := PrizeStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x FightType) String() string {
	s, ok := FightType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AllowType) String() string {
	s, ok := AllowType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

func init() { proto.RegisterFile("game_type.proto", fileDescriptorGameType) }

var fileDescriptorGameType = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x93, 0x4f, 0x6e, 0xd3, 0x40,
	0x14, 0xc6, 0x3d, 0x69, 0x9b, 0xc4, 0xaf, 0x69, 0xfb, 0xe4, 0x03, 0xcc, 0x01, 0x06, 0xa8, 0x9a,
	0x3f, 0x2d, 0x94, 0x9d, 0x81, 0xd6, 0xad, 0x14, 0x61, 0x0b, 0xbb, 0x8a, 0xb2, 0x8a, 0xdc, 0x62,
	0xd2, 0x48, 0x21, 0x63, 0x85, 0x09, 0x95, 0x59, 0x71, 0x04, 0x8e, 0xc1, 0x51, 0x58, 0x76, 0xc9,
	0x92, 0x98, 0x0d, 0xcb, 0xdc, 0x80, 0xea, 0x25, 0xb1, 0x3d, 0xb3, 0xfc, 0xfd, 0x94, 0x79, 0xdf,
	0xfb, 0x26, 0x63, 0x38, 0x1a, 0xc7, 0x9f, 0x93, 0x91, 0xca, 0xd2, 0xe4, 0x38, 0x9d, 0x4b, 0x25,
	0x9d, 0x5a, 0x7a, 0x2b, 0xee, 0xa0, 0xd1, 0x97, 0xe3, 0x28, 0x4b, 0x13, 0xe7, 0x00, 0xec, 0xbe,
	0xef, 0x8d, 0xa2, 0x61, 0x70, 0x71, 0x82, 0x96, 0x8e, 0x6d, 0x64, 0x3a, 0x76, 0xb0, 0xa6, 0x63,
	0x17, 0x77, 0x74, 0xec, 0xe1, 0xae, 0x8e, 0xa7, 0xb8, 0x27, 0x5e, 0x43, 0xd3, 0x8b, 0x55, 0xb2,
	0x4e, 0x39, 0x04, 0xf0, 0xdc, 0xe8, 0xa2, 0x8c, 0xd1, 0x99, 0x72, 0x74, 0xee, 0x60, 0x4d, 0x9c,
	0x41, 0xc3, 0x5f, 0xa8, 0x62, 0x41, 0xff, 0x26, 0xd2, 0x17, 0x2c, 0x70, 0xbb, 0x60, 0x81, 0x74,
	0xee, 0x3f, 0x83, 0x66, 0x30, 0x97, 0x69, 0x11, 0x1a, 0x7c, 0xf0, 0x03, 0x3d, 0xb4, 0xe4, 0x6d,
	0x68, 0xc9, 0xd4, 0x4e, 0x67, 0xaa, 0xa7, 0x33, 0xf5, 0xd3, 0xf9, 0x14, 0xf7, 0x0c, 0x3e, 0xc3,
	0xba, 0xc1, 0x2f, 0xb1, 0x61, 0xf0, 0x2b, 0x6c, 0x1a, 0x7c, 0x8e, 0xb6, 0x73, 0x04, 0xfb, 0xd5,
	0x3e, 0x27, 0x08, 0xa6, 0x68, 0xe3, 0xbe, 0x29, 0x3a, 0xd8, 0x32, 0x45, 0x17, 0x0f, 0x4c, 0xd1,
	0xc3, 0x43, 0xd1, 0x81, 0x7a, 0x10, 0x67, 0x83, 0x38, 0x73, 0x5a, 0xd0, 0x0c, 0xdc, 0xe1, 0x68,
	0xe0, 0x0e, 0xa9, 0x7c, 0x45, 0x54, 0xbd, 0x22, 0xba, 0xb5, 0x4f, 0x00, 0xe1, 0xbd, 0x4c, 0x43,
	0x15, 0xab, 0xc5, 0x17, 0x07, 0xa1, 0x15, 0x5e, 0xf9, 0xc1, 0x28, 0x8c, 0xdc, 0xe8, 0x26, 0xa4,
	0xb3, 0xa6, 0xa1, 0xf3, 0xa6, 0xa1, 0xcb, 0x33, 0x0d, 0x5d, 0x9f, 0x69, 0x7a, 0xb8, 0x2b, 0x9e,
	0x81, 0x1d, 0xcc, 0x27, 0xdf, 0x36, 0x4f, 0x82, 0x36, 0x27, 0x08, 0x93, 0x69, 0x72, 0xa7, 0x36,
	0xff, 0xec, 0x5a, 0xbc, 0x9b, 0xc7, 0x0f, 0xc8, 0xc4, 0x31, 0xc0, 0xf5, 0xec, 0xeb, 0x44, 0x95,
	0xbf, 0xde, 0x92, 0xfc, 0x18, 0x67, 0x68, 0x55, 0xe2, 0xad, 0x5c, 0xcc, 0x14, 0x32, 0x71, 0x5e,
	0xcc, 0xdb, 0xb4, 0x28, 0xa6, 0xbd, 0x97, 0xb3, 0x44, 0x1f, 0x4e, 0xb8, 0xe9, 0x4f, 0xe8, 0x49,
	0x85, 0x35, 0xe1, 0x83, 0x7d, 0x39, 0x19, 0xdf, 0xab, 0x22, 0xe9, 0xf2, 0xda, 0xbb, 0xaa, 0x5e,
	0x9c, 0x21, 0xa8, 0xbc, 0x21, 0xa8, 0xbb, 0x21, 0xba, 0xb8, 0x23, 0x5e, 0x80, 0xed, 0x4e, 0xa7,
	0xf2, 0xa1, 0x18, 0xe8, 0xf6, 0xfb, 0xfe, 0x40, 0x1f, 0x58, 0x89, 0x36, 0xb2, 0x37, 0xcf, 0x1f,
	0x97, 0xdc, 0xfa, 0xbd, 0xe4, 0xd6, 0x6a, 0xc9, 0xd9, 0xf7, 0x9c, 0xb3, 0x9f, 0x39, 0x67, 0xbf,
	0x72, 0xce, 0x1e, 0x73, 0xce, 0xfe, 0xe4, 0x9c, 0xfd, 0xcb, 0xb9, 0xb5, 0xca, 0x39, 0xfb, 0xf1,
	0x97, 0x5b, 0xb7, 0xf5, 0xf5, 0x77, 0xdc, 0x7d, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x04, 0x16,
	0x8b, 0xda, 0x03, 0x00, 0x00,
}
