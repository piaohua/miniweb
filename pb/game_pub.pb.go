// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_pub.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LoginPrize_LoginPrizeStatus int32

const (
	LoginPrizeNone LoginPrize_LoginPrizeStatus = 0
	LoginPrizeDone LoginPrize_LoginPrizeStatus = 1
	LoginPrizeGot  LoginPrize_LoginPrizeStatus = 2
)

var LoginPrize_LoginPrizeStatus_name = map[int32]string{
	0: "LoginPrizeNone",
	1: "LoginPrizeDone",
	2: "LoginPrizeGot",
}
var LoginPrize_LoginPrizeStatus_value = map[string]int32{
	"LoginPrizeNone": 0,
	"LoginPrizeDone": 1,
	"LoginPrizeGot":  2,
}

func (LoginPrize_LoginPrizeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGamePub, []int{4, 0}
}

// 玩家的基础数据
type UserData struct {
	Userid    string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	NickName  string `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName,omitempty"`
	AvatarUrl string `protobuf:"bytes,3,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`
	Gender    int32  `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Diamond   int64  `protobuf:"varint,5,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Coin      int64  `protobuf:"varint,6,opt,name=coin,proto3" json:"coin,omitempty"`
	Energy    int64  `protobuf:"varint,7,opt,name=energy,proto3" json:"energy,omitempty"`
}

func (m *UserData) Reset()                    { *m = UserData{} }
func (*UserData) ProtoMessage()               {}
func (*UserData) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{0} }

func (m *UserData) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *UserData) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *UserData) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *UserData) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *UserData) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *UserData) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *UserData) GetEnergy() int64 {
	if m != nil {
		return m.Energy
	}
	return 0
}

// 玩家的游戏数据
type GateData struct {
	Type   GateType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.GateType" json:"type,omitempty"`
	Gateid int32    `protobuf:"varint,2,opt,name=gateid,proto3" json:"gateid,omitempty"`
	Num    int32    `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Data   []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Star   int32    `protobuf:"varint,5,opt,name=star,proto3" json:"star,omitempty"`
}

func (m *GateData) Reset()                    { *m = GateData{} }
func (*GateData) ProtoMessage()               {}
func (*GateData) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{1} }

func (m *GateData) GetType() GateType {
	if m != nil {
		return m.Type
	}
	return GATE_TYPE0
}

func (m *GateData) GetGateid() int32 {
	if m != nil {
		return m.Gateid
	}
	return 0
}

func (m *GateData) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *GateData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GateData) GetStar() int32 {
	if m != nil {
		return m.Star
	}
	return 0
}

// 道具数据
type PropData struct {
	Type PropType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.PropType" json:"type,omitempty"`
	Num  int32    `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Attr int32    `protobuf:"varint,3,opt,name=attr,proto3" json:"attr,omitempty"`
	Name string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *PropData) Reset()                    { *m = PropData{} }
func (*PropData) ProtoMessage()               {}
func (*PropData) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{2} }

func (m *PropData) GetType() PropType {
	if m != nil {
		return m.Type
	}
	return PROP_TYPE0
}

func (m *PropData) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *PropData) GetAttr() int32 {
	if m != nil {
		return m.Attr
	}
	return 0
}

func (m *PropData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 商品信息
type Shop struct {
	Id     string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status ShopStatus `protobuf:"varint,2,opt,name=status,proto3,enum=pb.ShopStatus" json:"status,omitempty"`
	Type   PropType   `protobuf:"varint,3,opt,name=type,proto3,enum=pb.PropType" json:"type,omitempty"`
	Way    PayWay     `protobuf:"varint,4,opt,name=way,proto3,enum=pb.PayWay" json:"way,omitempty"`
	Number uint32     `protobuf:"varint,5,opt,name=number,proto3" json:"number,omitempty"`
	Price  uint32     `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Name   string     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Info   string     `protobuf:"bytes,8,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *Shop) Reset()                    { *m = Shop{} }
func (*Shop) ProtoMessage()               {}
func (*Shop) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{3} }

func (m *Shop) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Shop) GetStatus() ShopStatus {
	if m != nil {
		return m.Status
	}
	return SHOP_STATUS0
}

func (m *Shop) GetType() PropType {
	if m != nil {
		return m.Type
	}
	return PROP_TYPE0
}

func (m *Shop) GetWay() PayWay {
	if m != nil {
		return m.Way
	}
	return PAY_WAY0
}

func (m *Shop) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Shop) GetPrice() uint32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Shop) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Shop) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

// 连续登录信息
type LoginPrize struct {
	Day    uint32                      `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	Prize  []*LoginPrizeProp           `protobuf:"bytes,2,rep,name=prize" json:"prize,omitempty"`
	Status LoginPrize_LoginPrizeStatus `protobuf:"varint,3,opt,name=status,proto3,enum=pb.LoginPrize_LoginPrizeStatus" json:"status,omitempty"`
}

func (m *LoginPrize) Reset()                    { *m = LoginPrize{} }
func (*LoginPrize) ProtoMessage()               {}
func (*LoginPrize) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{4} }

func (m *LoginPrize) GetDay() uint32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *LoginPrize) GetPrize() []*LoginPrizeProp {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *LoginPrize) GetStatus() LoginPrize_LoginPrizeStatus {
	if m != nil {
		return m.Status
	}
	return LoginPrizeNone
}

type LoginPrizeProp struct {
	Type   PropType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.PropType" json:"type,omitempty"`
	Number int32    `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Name   string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *LoginPrizeProp) Reset()                    { *m = LoginPrizeProp{} }
func (*LoginPrizeProp) ProtoMessage()               {}
func (*LoginPrizeProp) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{5} }

func (m *LoginPrizeProp) GetType() PropType {
	if m != nil {
		return m.Type
	}
	return PROP_TYPE0
}

func (m *LoginPrizeProp) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *LoginPrizeProp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*UserData)(nil), "pb.UserData")
	proto.RegisterType((*GateData)(nil), "pb.GateData")
	proto.RegisterType((*PropData)(nil), "pb.PropData")
	proto.RegisterType((*Shop)(nil), "pb.Shop")
	proto.RegisterType((*LoginPrize)(nil), "pb.LoginPrize")
	proto.RegisterType((*LoginPrizeProp)(nil), "pb.LoginPrizeProp")
	proto.RegisterEnum("pb.LoginPrize_LoginPrizeStatus", LoginPrize_LoginPrizeStatus_name, LoginPrize_LoginPrizeStatus_value)
}
func (x LoginPrize_LoginPrizeStatus) String() string {
	s, ok := LoginPrize_LoginPrizeStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UserData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserData)
	if !ok {
		that2, ok := that.(UserData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	if this.AvatarUrl != that1.AvatarUrl {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Energy != that1.Energy {
		return false
	}
	return true
}
func (this *GateData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GateData)
	if !ok {
		that2, ok := that.(GateData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Gateid != that1.Gateid {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Star != that1.Star {
		return false
	}
	return true
}
func (this *PropData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PropData)
	if !ok {
		that2, ok := that.(PropData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Attr != that1.Attr {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Shop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Shop)
	if !ok {
		that2, ok := that.(Shop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Way != that1.Way {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Info != that1.Info {
		return false
	}
	return true
}
func (this *LoginPrize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginPrize)
	if !ok {
		that2, ok := that.(LoginPrize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	if len(this.Prize) != len(that1.Prize) {
		return false
	}
	for i := range this.Prize {
		if !this.Prize[i].Equal(that1.Prize[i]) {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *LoginPrizeProp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginPrizeProp)
	if !ok {
		that2, ok := that.(LoginPrizeProp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *UserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.UserData{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "NickName: "+fmt.Sprintf("%#v", this.NickName)+",\n")
	s = append(s, "AvatarUrl: "+fmt.Sprintf("%#v", this.AvatarUrl)+",\n")
	s = append(s, "Gender: "+fmt.Sprintf("%#v", this.Gender)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Energy: "+fmt.Sprintf("%#v", this.Energy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GateData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.GateData{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Gateid: "+fmt.Sprintf("%#v", this.Gateid)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Star: "+fmt.Sprintf("%#v", this.Star)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PropData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.PropData{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Attr: "+fmt.Sprintf("%#v", this.Attr)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Shop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.Shop{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Way: "+fmt.Sprintf("%#v", this.Way)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginPrize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.LoginPrize{")
	s = append(s, "Day: "+fmt.Sprintf("%#v", this.Day)+",\n")
	if this.Prize != nil {
		s = append(s, "Prize: "+fmt.Sprintf("%#v", this.Prize)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginPrizeProp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.LoginPrizeProp{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGamePub(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.AvatarUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.AvatarUrl)))
		i += copy(dAtA[i:], m.AvatarUrl)
	}
	if m.Gender != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Gender))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Diamond))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Coin))
	}
	if m.Energy != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Energy))
	}
	return i, nil
}

func (m *GateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Type))
	}
	if m.Gateid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Gateid))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Num))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Star != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Star))
	}
	return i, nil
}

func (m *PropData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PropData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Type))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Num))
	}
	if m.Attr != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Attr))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Shop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Status))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Type))
	}
	if m.Way != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Way))
	}
	if m.Number != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Number))
	}
	if m.Price != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Price))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Info) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Info)))
		i += copy(dAtA[i:], m.Info)
	}
	return i, nil
}

func (m *LoginPrize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginPrize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Day != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Day))
	}
	if len(m.Prize) > 0 {
		for _, msg := range m.Prize {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGamePub(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *LoginPrizeProp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginPrizeProp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Type))
	}
	if m.Number != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Number))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func encodeVarintGamePub(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	l = len(m.AvatarUrl)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovGamePub(uint64(m.Gender))
	}
	if m.Diamond != 0 {
		n += 1 + sovGamePub(uint64(m.Diamond))
	}
	if m.Coin != 0 {
		n += 1 + sovGamePub(uint64(m.Coin))
	}
	if m.Energy != 0 {
		n += 1 + sovGamePub(uint64(m.Energy))
	}
	return n
}

func (m *GateData) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePub(uint64(m.Type))
	}
	if m.Gateid != 0 {
		n += 1 + sovGamePub(uint64(m.Gateid))
	}
	if m.Num != 0 {
		n += 1 + sovGamePub(uint64(m.Num))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Star != 0 {
		n += 1 + sovGamePub(uint64(m.Star))
	}
	return n
}

func (m *PropData) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePub(uint64(m.Type))
	}
	if m.Num != 0 {
		n += 1 + sovGamePub(uint64(m.Num))
	}
	if m.Attr != 0 {
		n += 1 + sovGamePub(uint64(m.Attr))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	return n
}

func (m *Shop) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovGamePub(uint64(m.Status))
	}
	if m.Type != 0 {
		n += 1 + sovGamePub(uint64(m.Type))
	}
	if m.Way != 0 {
		n += 1 + sovGamePub(uint64(m.Way))
	}
	if m.Number != 0 {
		n += 1 + sovGamePub(uint64(m.Number))
	}
	if m.Price != 0 {
		n += 1 + sovGamePub(uint64(m.Price))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	return n
}

func (m *LoginPrize) Size() (n int) {
	var l int
	_ = l
	if m.Day != 0 {
		n += 1 + sovGamePub(uint64(m.Day))
	}
	if len(m.Prize) > 0 {
		for _, e := range m.Prize {
			l = e.Size()
			n += 1 + l + sovGamePub(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovGamePub(uint64(m.Status))
	}
	return n
}

func (m *LoginPrizeProp) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePub(uint64(m.Type))
	}
	if m.Number != 0 {
		n += 1 + sovGamePub(uint64(m.Number))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	return n
}

func sovGamePub(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGamePub(x uint64) (n int) {
	return sovGamePub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UserData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserData{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`NickName:` + fmt.Sprintf("%v", this.NickName) + `,`,
		`AvatarUrl:` + fmt.Sprintf("%v", this.AvatarUrl) + `,`,
		`Gender:` + fmt.Sprintf("%v", this.Gender) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Energy:` + fmt.Sprintf("%v", this.Energy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GateData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GateData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Gateid:` + fmt.Sprintf("%v", this.Gateid) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Star:` + fmt.Sprintf("%v", this.Star) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PropData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PropData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Attr:` + fmt.Sprintf("%v", this.Attr) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Shop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Shop{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Way:` + fmt.Sprintf("%v", this.Way) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Info:` + fmt.Sprintf("%v", this.Info) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginPrize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginPrize{`,
		`Day:` + fmt.Sprintf("%v", this.Day) + `,`,
		`Prize:` + strings.Replace(fmt.Sprintf("%v", this.Prize), "LoginPrizeProp", "LoginPrizeProp", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginPrizeProp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginPrizeProp{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGamePub(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			m.Energy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Energy |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (GateType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateid", wireType)
			}
			m.Gateid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gateid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PropData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PropData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PropData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PropType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (ShopStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PropType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Way", wireType)
			}
			m.Way = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Way |= (PayWay(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginPrize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginPrize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginPrize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize, &LoginPrizeProp{})
			if err := m.Prize[len(m.Prize)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (LoginPrize_LoginPrizeStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginPrizeProp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginPrizeProp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginPrizeProp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PropType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGamePub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGamePub
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGamePub
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGamePub(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGamePub = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGamePub   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game_pub.proto", fileDescriptorGamePub) }

var fileDescriptorGamePub = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0xda, 0x49, 0x9a, 0x0e, 0x8d, 0x09, 0x2b, 0x84, 0xac, 0xaa, 0x5a, 0x22, 0x1f, 0x50,
	0x0e, 0x28, 0x87, 0x70, 0xe0, 0x8e, 0x2a, 0xf5, 0x02, 0x55, 0xb5, 0xa5, 0xe2, 0x06, 0xda, 0xc4,
	0xdb, 0x60, 0x41, 0xd6, 0xd6, 0x66, 0x03, 0x72, 0x0f, 0x88, 0x4f, 0xe0, 0x33, 0xf8, 0x06, 0xbe,
	0x80, 0x63, 0x0e, 0x1c, 0x38, 0x12, 0x73, 0xe1, 0xd8, 0x4f, 0x40, 0x33, 0x76, 0xed, 0x04, 0xa9,
	0x12, 0xb7, 0x37, 0x6f, 0x26, 0x33, 0xef, 0x3d, 0x6f, 0x20, 0x98, 0xab, 0x85, 0x7e, 0x93, 0xad,
	0xa6, 0xe3, 0xcc, 0xa6, 0x2e, 0xe5, 0x5e, 0x36, 0x3d, 0xbc, 0x4b, 0x9c, 0xcb, 0x33, 0x5d, 0x92,
	0xd1, 0x37, 0x06, 0xbd, 0x8b, 0xa5, 0xb6, 0xc7, 0xca, 0x29, 0xfe, 0x00, 0xba, 0xab, 0xa5, 0xb6,
	0x49, 0x1c, 0xb2, 0x21, 0x1b, 0xed, 0xcb, 0xaa, 0xe2, 0x87, 0xd0, 0x33, 0xc9, 0xec, 0xdd, 0xa9,
	0x5a, 0xe8, 0xd0, 0xa3, 0x4e, 0x5d, 0xf3, 0x23, 0xd8, 0x57, 0x1f, 0x94, 0x53, 0xf6, 0xc2, 0xbe,
	0x0f, 0x7d, 0x6a, 0x36, 0x04, 0x6e, 0x9c, 0x6b, 0x13, 0x6b, 0x1b, 0xb6, 0x87, 0x6c, 0xd4, 0x91,
	0x55, 0xc5, 0x43, 0xd8, 0x8b, 0x13, 0xb5, 0x48, 0x4d, 0x1c, 0x76, 0x86, 0x6c, 0xe4, 0xcb, 0x9b,
	0x92, 0x73, 0x68, 0xcf, 0xd2, 0xc4, 0x84, 0x5d, 0xa2, 0x09, 0xe3, 0x16, 0x6d, 0xb4, 0x9d, 0xe7,
	0xe1, 0x1e, 0xb1, 0x55, 0x15, 0x7d, 0x82, 0xde, 0x89, 0x72, 0x9a, 0xb4, 0x0f, 0xa1, 0x8d, 0xb6,
	0x48, 0x79, 0x30, 0x39, 0x18, 0x67, 0xd3, 0x31, 0xf6, 0x5e, 0xe6, 0x99, 0x96, 0xd4, 0x21, 0x2d,
	0xca, 0xe9, 0x24, 0x26, 0x0f, 0xa8, 0x85, 0x2a, 0x3e, 0x00, 0xdf, 0xac, 0x16, 0xa4, 0xbd, 0x23,
	0x11, 0xa2, 0x86, 0x58, 0x39, 0x45, 0x9a, 0x0f, 0x24, 0x61, 0xe4, 0x96, 0x4e, 0x59, 0x92, 0xdb,
	0x91, 0x84, 0xa3, 0x4b, 0xe8, 0x9d, 0xd9, 0x34, 0xbb, 0xed, 0x3e, 0xf6, 0xb6, 0xee, 0x57, 0x77,
	0xbc, 0x9d, 0x3b, 0xca, 0x39, 0x5b, 0x9d, 0x26, 0x8c, 0x9c, 0xc1, 0x9c, 0xdb, 0x14, 0x25, 0xe1,
	0xe8, 0x07, 0x83, 0xf6, 0xf9, 0xdb, 0x34, 0xe3, 0x01, 0x78, 0xf5, 0xc7, 0xf1, 0x92, 0x98, 0x3f,
	0x82, 0xee, 0xd2, 0x29, 0xb7, 0x5a, 0xd2, 0xd6, 0x60, 0x12, 0xe0, 0x59, 0x9c, 0x3c, 0x27, 0x56,
	0x56, 0xdd, 0x5a, 0x9c, 0x7f, 0xab, 0xb8, 0x23, 0xf0, 0x3f, 0xaa, 0x9c, 0xae, 0x06, 0x13, 0xa0,
	0x01, 0x95, 0xbf, 0x52, 0xb9, 0x44, 0x1a, 0xa3, 0x33, 0xab, 0xc5, 0x54, 0x97, 0xf6, 0xfb, 0xb2,
	0xaa, 0xf8, 0x7d, 0xe8, 0x64, 0x36, 0x99, 0x69, 0xfa, 0x5a, 0x7d, 0x59, 0x16, 0xb5, 0x85, 0xbd,
	0xc6, 0x02, 0x72, 0x89, 0xb9, 0x4c, 0xc3, 0x5e, 0xc9, 0x21, 0x8e, 0xd6, 0x0c, 0xe0, 0x79, 0x3a,
	0x4f, 0xcc, 0x99, 0x4d, 0xae, 0x28, 0x9f, 0x58, 0xe5, 0xe4, 0xae, 0x2f, 0x11, 0xf2, 0x11, 0xad,
	0xbf, 0xc2, 0x47, 0xe7, 0x8f, 0xee, 0x4c, 0x38, 0xca, 0x6a, 0x7e, 0x80, 0x0e, 0x64, 0x39, 0xc0,
	0x9f, 0xd6, 0x41, 0x94, 0x16, 0x1f, 0xee, 0x8e, 0x6e, 0xc1, 0xdd, 0x64, 0xa2, 0x17, 0x30, 0xf8,
	0xb7, 0xc7, 0x39, 0x04, 0x0d, 0x77, 0x9a, 0x1a, 0x3d, 0x68, 0xed, 0x72, 0xc7, 0xc8, 0x31, 0x7e,
	0x0f, 0xfa, 0x0d, 0x77, 0x92, 0xba, 0x81, 0x17, 0xbd, 0xde, 0x1e, 0x43, 0x81, 0xff, 0xf1, 0x2e,
	0x9a, 0x70, 0xab, 0x77, 0x59, 0x85, 0x7b, 0x13, 0xa3, 0xdf, 0xc4, 0xf8, 0xec, 0xf1, 0x7a, 0x23,
	0x5a, 0x3f, 0x37, 0xa2, 0x75, 0xbd, 0x11, 0xec, 0x73, 0x21, 0xd8, 0xd7, 0x42, 0xb0, 0xef, 0x85,
	0x60, 0xeb, 0x42, 0xb0, 0x5f, 0x85, 0x60, 0x7f, 0x0a, 0xd1, 0xba, 0x2e, 0x04, 0xfb, 0xf2, 0x5b,
	0xb4, 0xa6, 0x5d, 0xfa, 0x8f, 0x3f, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xc4, 0xdf, 0x70,
	0x0a, 0x04, 0x00, 0x00,
}
