// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_pub.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 玩家的基础数据
type UserData struct {
	Userid    string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	NickName  string `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName,omitempty"`
	AvatarUrl string `protobuf:"bytes,3,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`
	Gender    int32  `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
}

func (m *UserData) Reset()                    { *m = UserData{} }
func (*UserData) ProtoMessage()               {}
func (*UserData) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{0} }

func (m *UserData) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *UserData) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *UserData) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *UserData) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

// 玩家的游戏数据
type GameData struct {
	Type  GameType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.GameType" json:"type,omitempty"`
	Gate  int32    `protobuf:"varint,2,opt,name=gate,proto3" json:"gate,omitempty"`
	Times int32    `protobuf:"varint,3,opt,name=times,proto3" json:"times,omitempty"`
	Data  []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GameData) Reset()                    { *m = GameData{} }
func (*GameData) ProtoMessage()               {}
func (*GameData) Descriptor() ([]byte, []int) { return fileDescriptorGamePub, []int{1} }

func (m *GameData) GetType() GameType {
	if m != nil {
		return m.Type
	}
	return GAME_TYPE0
}

func (m *GameData) GetGate() int32 {
	if m != nil {
		return m.Gate
	}
	return 0
}

func (m *GameData) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *GameData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*UserData)(nil), "pb.UserData")
	proto.RegisterType((*GameData)(nil), "pb.GameData")
}
func (this *UserData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserData)
	if !ok {
		that2, ok := that.(UserData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	if this.AvatarUrl != that1.AvatarUrl {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	return true
}
func (this *GameData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameData)
	if !ok {
		that2, ok := that.(GameData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Gate != that1.Gate {
		return false
	}
	if this.Times != that1.Times {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *UserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.UserData{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "NickName: "+fmt.Sprintf("%#v", this.NickName)+",\n")
	s = append(s, "AvatarUrl: "+fmt.Sprintf("%#v", this.AvatarUrl)+",\n")
	s = append(s, "Gender: "+fmt.Sprintf("%#v", this.Gender)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.GameData{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Gate: "+fmt.Sprintf("%#v", this.Gate)+",\n")
	s = append(s, "Times: "+fmt.Sprintf("%#v", this.Times)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGamePub(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.AvatarUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.AvatarUrl)))
		i += copy(dAtA[i:], m.AvatarUrl)
	}
	if m.Gender != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Gender))
	}
	return i, nil
}

func (m *GameData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Type))
	}
	if m.Gate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Gate))
	}
	if m.Times != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(m.Times))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGamePub(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeVarintGamePub(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	l = len(m.AvatarUrl)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovGamePub(uint64(m.Gender))
	}
	return n
}

func (m *GameData) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePub(uint64(m.Type))
	}
	if m.Gate != 0 {
		n += 1 + sovGamePub(uint64(m.Gate))
	}
	if m.Times != 0 {
		n += 1 + sovGamePub(uint64(m.Times))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGamePub(uint64(l))
	}
	return n
}

func sovGamePub(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGamePub(x uint64) (n int) {
	return sovGamePub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UserData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserData{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`NickName:` + fmt.Sprintf("%v", this.NickName) + `,`,
		`AvatarUrl:` + fmt.Sprintf("%v", this.AvatarUrl) + `,`,
		`Gender:` + fmt.Sprintf("%v", this.Gender) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Gate:` + fmt.Sprintf("%v", this.Gate) + `,`,
		`Times:` + fmt.Sprintf("%v", this.Times) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGamePub(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (GameType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gate", wireType)
			}
			m.Gate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGamePub
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGamePub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGamePub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGamePub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGamePub
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGamePub
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGamePub(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGamePub = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGamePub   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game_pub.proto", fileDescriptorGamePub) }

var fileDescriptorGamePub = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x41, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x33, 0x35, 0x29, 0xe9, 0x50, 0x2a, 0x0c, 0x22, 0xa1, 0xc8, 0x23, 0x74, 0xd5, 0x85,
	0x64, 0xa1, 0x37, 0x10, 0xc1, 0x9d, 0x8b, 0xc1, 0xae, 0xe5, 0xc5, 0x3c, 0x42, 0xd4, 0xb4, 0xc3,
	0x64, 0x2a, 0x74, 0xe7, 0x11, 0x3c, 0x86, 0x47, 0x71, 0xd9, 0xa5, 0x4b, 0x33, 0x6e, 0x5c, 0xf6,
	0x08, 0x92, 0x97, 0xa0, 0xbb, 0xff, 0xff, 0xbf, 0x61, 0xbe, 0x61, 0xe4, 0xac, 0xc4, 0x9a, 0xee,
	0xcd, 0x36, 0xcf, 0x8c, 0xdd, 0xb8, 0x8d, 0x1a, 0x99, 0x7c, 0x7e, 0xcc, 0x9b, 0xdb, 0x19, 0xea,
	0xc7, 0x85, 0x93, 0xf1, 0xaa, 0x21, 0x7b, 0x8d, 0x0e, 0xd5, 0xa9, 0x1c, 0x6f, 0x1b, 0xb2, 0x55,
	0x91, 0x88, 0x54, 0x2c, 0x27, 0x7a, 0x68, 0x6a, 0x2e, 0xe3, 0x75, 0xf5, 0xf0, 0x74, 0x8b, 0x35,
	0x25, 0x23, 0x26, 0x7f, 0x5d, 0x9d, 0xc9, 0x09, 0xbe, 0xa0, 0x43, 0xbb, 0xb2, 0xcf, 0xc9, 0x11,
	0xc3, 0xff, 0xa1, 0xbb, 0xb1, 0xa4, 0x75, 0x41, 0x36, 0x09, 0x53, 0xb1, 0x8c, 0xf4, 0xd0, 0x16,
	0x8f, 0x32, 0xbe, 0xc1, 0x9a, 0xd8, 0x9a, 0xca, 0xb0, 0x7b, 0x0f, 0x3b, 0x67, 0x17, 0xd3, 0xcc,
	0xe4, 0x59, 0xc7, 0xee, 0x76, 0x86, 0x34, 0x13, 0xa5, 0x64, 0x58, 0xa2, 0xeb, 0xdd, 0x91, 0xe6,
	0xac, 0x4e, 0x64, 0xe4, 0xaa, 0x9a, 0x1a, 0x76, 0x46, 0xba, 0x2f, 0xdd, 0xc9, 0x02, 0x1d, 0xb2,
	0x6d, 0xaa, 0x39, 0x5f, 0x9d, 0xef, 0x5b, 0x08, 0x3e, 0x5b, 0x08, 0x0e, 0x2d, 0x88, 0x57, 0x0f,
	0xe2, 0xdd, 0x83, 0xf8, 0xf0, 0x20, 0xf6, 0x1e, 0xc4, 0x97, 0x07, 0xf1, 0xe3, 0x21, 0x38, 0x78,
	0x10, 0x6f, 0xdf, 0x10, 0xe4, 0x63, 0xfe, 0x96, 0xcb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b,
	0x57, 0xbb, 0xf9, 0x3d, 0x01, 0x00, 0x00,
}
