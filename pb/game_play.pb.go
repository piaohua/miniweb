// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_play.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 开始,TODO 数据验证
type CStart struct {
	Type   GateType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.GateType" json:"type,omitempty"`
	Gateid int32    `protobuf:"varint,2,opt,name=gateid,proto3" json:"gateid,omitempty"`
	Ids    []string `protobuf:"bytes,3,rep,name=ids" json:"ids,omitempty"`
}

func (m *CStart) Reset()                    { *m = CStart{} }
func (*CStart) ProtoMessage()               {}
func (*CStart) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{0} }

func (m *CStart) GetType() GateType {
	if m != nil {
		return m.Type
	}
	return GATE_TYPE0
}

func (m *CStart) GetGateid() int32 {
	if m != nil {
		return m.Gateid
	}
	return 0
}

func (m *CStart) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type SStart struct {
	GateInfo *GateData `protobuf:"bytes,1,opt,name=gateInfo" json:"gateInfo,omitempty"`
	Error    ErrCode   `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SStart) Reset()                    { *m = SStart{} }
func (*SStart) ProtoMessage()               {}
func (*SStart) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{1} }

func (m *SStart) GetGateInfo() *GateData {
	if m != nil {
		return m.GateInfo
	}
	return nil
}

func (m *SStart) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 结算数据
type COverData struct {
	Type   GateType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.GateType" json:"type,omitempty"`
	Gateid int32    `protobuf:"varint,2,opt,name=gateid,proto3" json:"gateid,omitempty"`
	Star   int32    `protobuf:"varint,3,opt,name=star,proto3" json:"star,omitempty"`
	Score  int32    `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *COverData) Reset()                    { *m = COverData{} }
func (*COverData) ProtoMessage()               {}
func (*COverData) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{2} }

func (m *COverData) GetType() GateType {
	if m != nil {
		return m.Type
	}
	return GATE_TYPE0
}

func (m *COverData) GetGateid() int32 {
	if m != nil {
		return m.Gateid
	}
	return 0
}

func (m *COverData) GetStar() int32 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *COverData) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type SOverData struct {
	CardInfo int32       `protobuf:"varint,1,opt,name=cardInfo,proto3" json:"cardInfo,omitempty"`
	GateInfo *GateData   `protobuf:"bytes,2,opt,name=gateInfo" json:"gateInfo,omitempty"`
	PropInfo []*PropData `protobuf:"bytes,3,rep,name=propInfo" json:"propInfo,omitempty"`
	RankInfo []*GateRank `protobuf:"bytes,4,rep,name=rankInfo" json:"rankInfo,omitempty"`
	Error    ErrCode     `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SOverData) Reset()                    { *m = SOverData{} }
func (*SOverData) ProtoMessage()               {}
func (*SOverData) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{3} }

func (m *SOverData) GetCardInfo() int32 {
	if m != nil {
		return m.CardInfo
	}
	return 0
}

func (m *SOverData) GetGateInfo() *GateData {
	if m != nil {
		return m.GateInfo
	}
	return nil
}

func (m *SOverData) GetPropInfo() []*PropData {
	if m != nil {
		return m.PropInfo
	}
	return nil
}

func (m *SOverData) GetRankInfo() []*GateRank {
	if m != nil {
		return m.RankInfo
	}
	return nil
}

func (m *SOverData) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 卡牌
type CCard struct {
}

func (m *CCard) Reset()                    { *m = CCard{} }
func (*CCard) ProtoMessage()               {}
func (*CCard) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{4} }

type SCard struct {
	LeftTimes int32       `protobuf:"varint,1,opt,name=leftTimes,proto3" json:"leftTimes,omitempty"`
	PropInfo  []*PropData `protobuf:"bytes,3,rep,name=propInfo" json:"propInfo,omitempty"`
	Error     ErrCode     `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SCard) Reset()                    { *m = SCard{} }
func (*SCard) ProtoMessage()               {}
func (*SCard) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{5} }

func (m *SCard) GetLeftTimes() int32 {
	if m != nil {
		return m.LeftTimes
	}
	return 0
}

func (m *SCard) GetPropInfo() []*PropData {
	if m != nil {
		return m.PropInfo
	}
	return nil
}

func (m *SCard) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 登录奖励
type CLoginPrize struct {
	Type PrizeType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.PrizeType" json:"type,omitempty"`
	Day  uint32    `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
}

func (m *CLoginPrize) Reset()                    { *m = CLoginPrize{} }
func (*CLoginPrize) ProtoMessage()               {}
func (*CLoginPrize) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{6} }

func (m *CLoginPrize) GetType() PrizeType {
	if m != nil {
		return m.Type
	}
	return PrizeSelect
}

func (m *CLoginPrize) GetDay() uint32 {
	if m != nil {
		return m.Day
	}
	return 0
}

type SLoginPrize struct {
	Type  PrizeType     `protobuf:"varint,1,opt,name=type,proto3,enum=pb.PrizeType" json:"type,omitempty"`
	List  []*LoginPrize `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode       `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SLoginPrize) Reset()                    { *m = SLoginPrize{} }
func (*SLoginPrize) ProtoMessage()               {}
func (*SLoginPrize) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{7} }

func (m *SLoginPrize) GetType() PrizeType {
	if m != nil {
		return m.Type
	}
	return PrizeSelect
}

func (m *SLoginPrize) GetList() []*LoginPrize {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SLoginPrize) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 使用道具
type CUseProp struct {
	Ptype PropType `protobuf:"varint,1,opt,name=ptype,proto3,enum=pb.PropType" json:"ptype,omitempty"`
}

func (m *CUseProp) Reset()                    { *m = CUseProp{} }
func (*CUseProp) ProtoMessage()               {}
func (*CUseProp) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{8} }

func (m *CUseProp) GetPtype() PropType {
	if m != nil {
		return m.Ptype
	}
	return PROP_TYPE0
}

type SUseProp struct {
	Ptype PropType `protobuf:"varint,1,opt,name=ptype,proto3,enum=pb.PropType" json:"ptype,omitempty"`
	Error ErrCode  `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SUseProp) Reset()                    { *m = SUseProp{} }
func (*SUseProp) ProtoMessage()               {}
func (*SUseProp) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{9} }

func (m *SUseProp) GetPtype() PropType {
	if m != nil {
		return m.Ptype
	}
	return PROP_TYPE0
}

func (m *SUseProp) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// Share info
type CShareInfo struct {
	Type PrizeType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.PrizeType" json:"type,omitempty"`
	Id   string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CShareInfo) Reset()                    { *m = CShareInfo{} }
func (*CShareInfo) ProtoMessage()               {}
func (*CShareInfo) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{10} }

func (m *CShareInfo) GetType() PrizeType {
	if m != nil {
		return m.Type
	}
	return PrizeSelect
}

func (m *CShareInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SShareInfo struct {
	Type  PrizeType    `protobuf:"varint,1,opt,name=type,proto3,enum=pb.PrizeType" json:"type,omitempty"`
	Num   int32        `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	List  []*ShareInfo `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Error ErrCode      `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SShareInfo) Reset()                    { *m = SShareInfo{} }
func (*SShareInfo) ProtoMessage()               {}
func (*SShareInfo) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{11} }

func (m *SShareInfo) GetType() PrizeType {
	if m != nil {
		return m.Type
	}
	return PrizeSelect
}

func (m *SShareInfo) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *SShareInfo) GetList() []*ShareInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SShareInfo) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// Invite info
type CInviteInfo struct {
	Type PrizeType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.PrizeType" json:"type,omitempty"`
	Id   string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CInviteInfo) Reset()                    { *m = CInviteInfo{} }
func (*CInviteInfo) ProtoMessage()               {}
func (*CInviteInfo) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{12} }

func (m *CInviteInfo) GetType() PrizeType {
	if m != nil {
		return m.Type
	}
	return PrizeSelect
}

func (m *CInviteInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SInviteInfo struct {
	Type  PrizeType     `protobuf:"varint,1,opt,name=type,proto3,enum=pb.PrizeType" json:"type,omitempty"`
	Num   int32         `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Count int32         `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	List  []*InviteInfo `protobuf:"bytes,4,rep,name=list" json:"list,omitempty"`
	Error ErrCode       `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SInviteInfo) Reset()                    { *m = SInviteInfo{} }
func (*SInviteInfo) ProtoMessage()               {}
func (*SInviteInfo) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{13} }

func (m *SInviteInfo) GetType() PrizeType {
	if m != nil {
		return m.Type
	}
	return PrizeSelect
}

func (m *SInviteInfo) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *SInviteInfo) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SInviteInfo) GetList() []*InviteInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SInviteInfo) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// Share
type CShare struct {
}

func (m *CShare) Reset()                    { *m = CShare{} }
func (*CShare) ProtoMessage()               {}
func (*CShare) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{14} }

type SShare struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SShare) Reset()                    { *m = SShare{} }
func (*SShare) ProtoMessage()               {}
func (*SShare) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{15} }

func (m *SShare) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// Invite
type CInvite struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CInvite) Reset()                    { *m = CInvite{} }
func (*CInvite) ProtoMessage()               {}
func (*CInvite) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{16} }

func (m *CInvite) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SInvite struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SInvite) Reset()                    { *m = SInvite{} }
func (*SInvite) ProtoMessage()               {}
func (*SInvite) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{17} }

func (m *SInvite) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// get rank
type CGetRank struct {
	Type   GateType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.GateType" json:"type,omitempty"`
	Gateid int32    `protobuf:"varint,2,opt,name=gateid,proto3" json:"gateid,omitempty"`
}

func (m *CGetRank) Reset()                    { *m = CGetRank{} }
func (*CGetRank) ProtoMessage()               {}
func (*CGetRank) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{18} }

func (m *CGetRank) GetType() GateType {
	if m != nil {
		return m.Type
	}
	return GATE_TYPE0
}

func (m *CGetRank) GetGateid() int32 {
	if m != nil {
		return m.Gateid
	}
	return 0
}

type SGetRank struct {
	Type     GateType    `protobuf:"varint,1,opt,name=type,proto3,enum=pb.GateType" json:"type,omitempty"`
	Gateid   int32       `protobuf:"varint,2,opt,name=gateid,proto3" json:"gateid,omitempty"`
	RankInfo []*GateRank `protobuf:"bytes,3,rep,name=rankInfo" json:"rankInfo,omitempty"`
	Error    ErrCode     `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SGetRank) Reset()                    { *m = SGetRank{} }
func (*SGetRank) ProtoMessage()               {}
func (*SGetRank) Descriptor() ([]byte, []int) { return fileDescriptorGamePlay, []int{19} }

func (m *SGetRank) GetType() GateType {
	if m != nil {
		return m.Type
	}
	return GATE_TYPE0
}

func (m *SGetRank) GetGateid() int32 {
	if m != nil {
		return m.Gateid
	}
	return 0
}

func (m *SGetRank) GetRankInfo() []*GateRank {
	if m != nil {
		return m.RankInfo
	}
	return nil
}

func (m *SGetRank) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*CStart)(nil), "pb.CStart")
	proto.RegisterType((*SStart)(nil), "pb.SStart")
	proto.RegisterType((*COverData)(nil), "pb.COverData")
	proto.RegisterType((*SOverData)(nil), "pb.SOverData")
	proto.RegisterType((*CCard)(nil), "pb.CCard")
	proto.RegisterType((*SCard)(nil), "pb.SCard")
	proto.RegisterType((*CLoginPrize)(nil), "pb.CLoginPrize")
	proto.RegisterType((*SLoginPrize)(nil), "pb.SLoginPrize")
	proto.RegisterType((*CUseProp)(nil), "pb.CUseProp")
	proto.RegisterType((*SUseProp)(nil), "pb.SUseProp")
	proto.RegisterType((*CShareInfo)(nil), "pb.CShareInfo")
	proto.RegisterType((*SShareInfo)(nil), "pb.SShareInfo")
	proto.RegisterType((*CInviteInfo)(nil), "pb.CInviteInfo")
	proto.RegisterType((*SInviteInfo)(nil), "pb.SInviteInfo")
	proto.RegisterType((*CShare)(nil), "pb.CShare")
	proto.RegisterType((*SShare)(nil), "pb.SShare")
	proto.RegisterType((*CInvite)(nil), "pb.CInvite")
	proto.RegisterType((*SInvite)(nil), "pb.SInvite")
	proto.RegisterType((*CGetRank)(nil), "pb.CGetRank")
	proto.RegisterType((*SGetRank)(nil), "pb.SGetRank")
}
func (this *CStart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CStart)
	if !ok {
		that2, ok := that.(CStart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Gateid != that1.Gateid {
		return false
	}
	if len(this.Ids) != len(that1.Ids) {
		return false
	}
	for i := range this.Ids {
		if this.Ids[i] != that1.Ids[i] {
			return false
		}
	}
	return true
}
func (this *SStart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SStart)
	if !ok {
		that2, ok := that.(SStart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GateInfo.Equal(that1.GateInfo) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *COverData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*COverData)
	if !ok {
		that2, ok := that.(COverData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Gateid != that1.Gateid {
		return false
	}
	if this.Star != that1.Star {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	return true
}
func (this *SOverData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SOverData)
	if !ok {
		that2, ok := that.(SOverData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CardInfo != that1.CardInfo {
		return false
	}
	if !this.GateInfo.Equal(that1.GateInfo) {
		return false
	}
	if len(this.PropInfo) != len(that1.PropInfo) {
		return false
	}
	for i := range this.PropInfo {
		if !this.PropInfo[i].Equal(that1.PropInfo[i]) {
			return false
		}
	}
	if len(this.RankInfo) != len(that1.RankInfo) {
		return false
	}
	for i := range this.RankInfo {
		if !this.RankInfo[i].Equal(that1.RankInfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CCard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CCard)
	if !ok {
		that2, ok := that.(CCard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SCard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SCard)
	if !ok {
		that2, ok := that.(SCard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LeftTimes != that1.LeftTimes {
		return false
	}
	if len(this.PropInfo) != len(that1.PropInfo) {
		return false
	}
	for i := range this.PropInfo {
		if !this.PropInfo[i].Equal(that1.PropInfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CLoginPrize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CLoginPrize)
	if !ok {
		that2, ok := that.(CLoginPrize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	return true
}
func (this *SLoginPrize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SLoginPrize)
	if !ok {
		that2, ok := that.(SLoginPrize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CUseProp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CUseProp)
	if !ok {
		that2, ok := that.(CUseProp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ptype != that1.Ptype {
		return false
	}
	return true
}
func (this *SUseProp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SUseProp)
	if !ok {
		that2, ok := that.(SUseProp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ptype != that1.Ptype {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CShareInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CShareInfo)
	if !ok {
		that2, ok := that.(CShareInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SShareInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SShareInfo)
	if !ok {
		that2, ok := that.(SShareInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CInviteInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CInviteInfo)
	if !ok {
		that2, ok := that.(CInviteInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SInviteInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SInviteInfo)
	if !ok {
		that2, ok := that.(SInviteInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CShare) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CShare)
	if !ok {
		that2, ok := that.(CShare)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SShare) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SShare)
	if !ok {
		that2, ok := that.(SShare)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CInvite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CInvite)
	if !ok {
		that2, ok := that.(CInvite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SInvite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SInvite)
	if !ok {
		that2, ok := that.(SInvite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CGetRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CGetRank)
	if !ok {
		that2, ok := that.(CGetRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Gateid != that1.Gateid {
		return false
	}
	return true
}
func (this *SGetRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SGetRank)
	if !ok {
		that2, ok := that.(SGetRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Gateid != that1.Gateid {
		return false
	}
	if len(this.RankInfo) != len(that1.RankInfo) {
		return false
	}
	for i := range this.RankInfo {
		if !this.RankInfo[i].Equal(that1.RankInfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CStart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CStart{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Gateid: "+fmt.Sprintf("%#v", this.Gateid)+",\n")
	s = append(s, "Ids: "+fmt.Sprintf("%#v", this.Ids)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SStart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SStart{")
	if this.GateInfo != nil {
		s = append(s, "GateInfo: "+fmt.Sprintf("%#v", this.GateInfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *COverData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.COverData{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Gateid: "+fmt.Sprintf("%#v", this.Gateid)+",\n")
	s = append(s, "Star: "+fmt.Sprintf("%#v", this.Star)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SOverData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SOverData{")
	s = append(s, "CardInfo: "+fmt.Sprintf("%#v", this.CardInfo)+",\n")
	if this.GateInfo != nil {
		s = append(s, "GateInfo: "+fmt.Sprintf("%#v", this.GateInfo)+",\n")
	}
	if this.PropInfo != nil {
		s = append(s, "PropInfo: "+fmt.Sprintf("%#v", this.PropInfo)+",\n")
	}
	if this.RankInfo != nil {
		s = append(s, "RankInfo: "+fmt.Sprintf("%#v", this.RankInfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CCard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CCard{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SCard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SCard{")
	s = append(s, "LeftTimes: "+fmt.Sprintf("%#v", this.LeftTimes)+",\n")
	if this.PropInfo != nil {
		s = append(s, "PropInfo: "+fmt.Sprintf("%#v", this.PropInfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CLoginPrize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CLoginPrize{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Day: "+fmt.Sprintf("%#v", this.Day)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SLoginPrize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SLoginPrize{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CUseProp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CUseProp{")
	s = append(s, "Ptype: "+fmt.Sprintf("%#v", this.Ptype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SUseProp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SUseProp{")
	s = append(s, "Ptype: "+fmt.Sprintf("%#v", this.Ptype)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CShareInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CShareInfo{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SShareInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SShareInfo{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CInviteInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CInviteInfo{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SInviteInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SInviteInfo{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CShare) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CShare{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SShare) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SShare{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CInvite{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SInvite{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CGetRank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CGetRank{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Gateid: "+fmt.Sprintf("%#v", this.Gateid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SGetRank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SGetRank{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Gateid: "+fmt.Sprintf("%#v", this.Gateid)+",\n")
	if this.RankInfo != nil {
		s = append(s, "RankInfo: "+fmt.Sprintf("%#v", this.RankInfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGamePlay(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Type))
	}
	if m.Gateid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Gateid))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *SStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GateInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.GateInfo.Size()))
		n1, err := m.GateInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *COverData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *COverData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Type))
	}
	if m.Gateid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Gateid))
	}
	if m.Star != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Star))
	}
	if m.Score != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Score))
	}
	return i, nil
}

func (m *SOverData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SOverData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CardInfo != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.CardInfo))
	}
	if m.GateInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.GateInfo.Size()))
		n2, err := m.GateInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.PropInfo) > 0 {
		for _, msg := range m.PropInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGamePlay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RankInfo) > 0 {
		for _, msg := range m.RankInfo {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGamePlay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LeftTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.LeftTimes))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Error))
	}
	if len(m.PropInfo) > 0 {
		for _, msg := range m.PropInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGamePlay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CLoginPrize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CLoginPrize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Type))
	}
	if m.Day != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Day))
	}
	return i, nil
}

func (m *SLoginPrize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SLoginPrize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Type))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGamePlay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CUseProp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CUseProp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ptype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Ptype))
	}
	return i, nil
}

func (m *SUseProp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SUseProp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ptype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Ptype))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CShareInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CShareInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Type))
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *SShareInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SShareInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Type))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Num))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGamePlay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CInviteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CInviteInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Type))
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *SInviteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SInviteInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Type))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Num))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGamePlay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CShare) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SShare) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SInvite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CGetRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CGetRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Type))
	}
	if m.Gateid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Gateid))
	}
	return i, nil
}

func (m *SGetRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGetRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Type))
	}
	if m.Gateid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Gateid))
	}
	if len(m.RankInfo) > 0 {
		for _, msg := range m.RankInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGamePlay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamePlay(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeVarintGamePlay(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CStart) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePlay(uint64(m.Type))
	}
	if m.Gateid != 0 {
		n += 1 + sovGamePlay(uint64(m.Gateid))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovGamePlay(uint64(l))
		}
	}
	return n
}

func (m *SStart) Size() (n int) {
	var l int
	_ = l
	if m.GateInfo != nil {
		l = m.GateInfo.Size()
		n += 1 + l + sovGamePlay(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGamePlay(uint64(m.Error))
	}
	return n
}

func (m *COverData) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePlay(uint64(m.Type))
	}
	if m.Gateid != 0 {
		n += 1 + sovGamePlay(uint64(m.Gateid))
	}
	if m.Star != 0 {
		n += 1 + sovGamePlay(uint64(m.Star))
	}
	if m.Score != 0 {
		n += 1 + sovGamePlay(uint64(m.Score))
	}
	return n
}

func (m *SOverData) Size() (n int) {
	var l int
	_ = l
	if m.CardInfo != 0 {
		n += 1 + sovGamePlay(uint64(m.CardInfo))
	}
	if m.GateInfo != nil {
		l = m.GateInfo.Size()
		n += 1 + l + sovGamePlay(uint64(l))
	}
	if len(m.PropInfo) > 0 {
		for _, e := range m.PropInfo {
			l = e.Size()
			n += 1 + l + sovGamePlay(uint64(l))
		}
	}
	if len(m.RankInfo) > 0 {
		for _, e := range m.RankInfo {
			l = e.Size()
			n += 1 + l + sovGamePlay(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGamePlay(uint64(m.Error))
	}
	return n
}

func (m *CCard) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SCard) Size() (n int) {
	var l int
	_ = l
	if m.LeftTimes != 0 {
		n += 1 + sovGamePlay(uint64(m.LeftTimes))
	}
	if m.Error != 0 {
		n += 1 + sovGamePlay(uint64(m.Error))
	}
	if len(m.PropInfo) > 0 {
		for _, e := range m.PropInfo {
			l = e.Size()
			n += 1 + l + sovGamePlay(uint64(l))
		}
	}
	return n
}

func (m *CLoginPrize) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePlay(uint64(m.Type))
	}
	if m.Day != 0 {
		n += 1 + sovGamePlay(uint64(m.Day))
	}
	return n
}

func (m *SLoginPrize) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePlay(uint64(m.Type))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGamePlay(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGamePlay(uint64(m.Error))
	}
	return n
}

func (m *CUseProp) Size() (n int) {
	var l int
	_ = l
	if m.Ptype != 0 {
		n += 1 + sovGamePlay(uint64(m.Ptype))
	}
	return n
}

func (m *SUseProp) Size() (n int) {
	var l int
	_ = l
	if m.Ptype != 0 {
		n += 1 + sovGamePlay(uint64(m.Ptype))
	}
	if m.Error != 0 {
		n += 1 + sovGamePlay(uint64(m.Error))
	}
	return n
}

func (m *CShareInfo) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePlay(uint64(m.Type))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGamePlay(uint64(l))
	}
	return n
}

func (m *SShareInfo) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePlay(uint64(m.Type))
	}
	if m.Num != 0 {
		n += 1 + sovGamePlay(uint64(m.Num))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGamePlay(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGamePlay(uint64(m.Error))
	}
	return n
}

func (m *CInviteInfo) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePlay(uint64(m.Type))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGamePlay(uint64(l))
	}
	return n
}

func (m *SInviteInfo) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePlay(uint64(m.Type))
	}
	if m.Num != 0 {
		n += 1 + sovGamePlay(uint64(m.Num))
	}
	if m.Count != 0 {
		n += 1 + sovGamePlay(uint64(m.Count))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGamePlay(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGamePlay(uint64(m.Error))
	}
	return n
}

func (m *CShare) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SShare) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovGamePlay(uint64(m.Error))
	}
	return n
}

func (m *CInvite) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGamePlay(uint64(l))
	}
	return n
}

func (m *SInvite) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovGamePlay(uint64(m.Error))
	}
	return n
}

func (m *CGetRank) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePlay(uint64(m.Type))
	}
	if m.Gateid != 0 {
		n += 1 + sovGamePlay(uint64(m.Gateid))
	}
	return n
}

func (m *SGetRank) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGamePlay(uint64(m.Type))
	}
	if m.Gateid != 0 {
		n += 1 + sovGamePlay(uint64(m.Gateid))
	}
	if len(m.RankInfo) > 0 {
		for _, e := range m.RankInfo {
			l = e.Size()
			n += 1 + l + sovGamePlay(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGamePlay(uint64(m.Error))
	}
	return n
}

func sovGamePlay(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGamePlay(x uint64) (n int) {
	return sovGamePlay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CStart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CStart{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Gateid:` + fmt.Sprintf("%v", this.Gateid) + `,`,
		`Ids:` + fmt.Sprintf("%v", this.Ids) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SStart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SStart{`,
		`GateInfo:` + strings.Replace(fmt.Sprintf("%v", this.GateInfo), "GateData", "GateData", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *COverData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&COverData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Gateid:` + fmt.Sprintf("%v", this.Gateid) + `,`,
		`Star:` + fmt.Sprintf("%v", this.Star) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SOverData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SOverData{`,
		`CardInfo:` + fmt.Sprintf("%v", this.CardInfo) + `,`,
		`GateInfo:` + strings.Replace(fmt.Sprintf("%v", this.GateInfo), "GateData", "GateData", 1) + `,`,
		`PropInfo:` + strings.Replace(fmt.Sprintf("%v", this.PropInfo), "PropData", "PropData", 1) + `,`,
		`RankInfo:` + strings.Replace(fmt.Sprintf("%v", this.RankInfo), "GateRank", "GateRank", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CCard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CCard{`,
		`}`,
	}, "")
	return s
}
func (this *SCard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SCard{`,
		`LeftTimes:` + fmt.Sprintf("%v", this.LeftTimes) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`PropInfo:` + strings.Replace(fmt.Sprintf("%v", this.PropInfo), "PropData", "PropData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CLoginPrize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CLoginPrize{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Day:` + fmt.Sprintf("%v", this.Day) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SLoginPrize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SLoginPrize{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "LoginPrize", "LoginPrize", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CUseProp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CUseProp{`,
		`Ptype:` + fmt.Sprintf("%v", this.Ptype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SUseProp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SUseProp{`,
		`Ptype:` + fmt.Sprintf("%v", this.Ptype) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CShareInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CShareInfo{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SShareInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SShareInfo{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "ShareInfo", "ShareInfo", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CInviteInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CInviteInfo{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SInviteInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SInviteInfo{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "InviteInfo", "InviteInfo", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CShare) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CShare{`,
		`}`,
	}, "")
	return s
}
func (this *SShare) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SShare{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CInvite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CInvite{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SInvite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SInvite{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CGetRank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CGetRank{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Gateid:` + fmt.Sprintf("%v", this.Gateid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SGetRank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SGetRank{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Gateid:` + fmt.Sprintf("%v", this.Gateid) + `,`,
		`RankInfo:` + strings.Replace(fmt.Sprintf("%v", this.RankInfo), "GateRank", "GateRank", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGamePlay(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (GateType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateid", wireType)
			}
			m.Gateid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gateid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePlay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GateInfo == nil {
				m.GateInfo = &GateData{}
			}
			if err := m.GateInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *COverData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: COverData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: COverData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (GateType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateid", wireType)
			}
			m.Gateid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gateid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SOverData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SOverData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SOverData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardInfo", wireType)
			}
			m.CardInfo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardInfo |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GateInfo == nil {
				m.GateInfo = &GateData{}
			}
			if err := m.GateInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropInfo = append(m.PropInfo, &PropData{})
			if err := m.PropInfo[len(m.PropInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankInfo = append(m.RankInfo, &GateRank{})
			if err := m.RankInfo[len(m.RankInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTimes", wireType)
			}
			m.LeftTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropInfo = append(m.PropInfo, &PropData{})
			if err := m.PropInfo[len(m.PropInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CLoginPrize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CLoginPrize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CLoginPrize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PrizeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SLoginPrize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SLoginPrize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SLoginPrize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PrizeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &LoginPrize{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CUseProp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CUseProp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CUseProp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptype", wireType)
			}
			m.Ptype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptype |= (PropType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SUseProp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SUseProp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SUseProp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptype", wireType)
			}
			m.Ptype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptype |= (PropType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CShareInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CShareInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CShareInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PrizeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePlay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SShareInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SShareInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SShareInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PrizeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ShareInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CInviteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CInviteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CInviteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PrizeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePlay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SInviteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SInviteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SInviteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PrizeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &InviteInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamePlay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CGetRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CGetRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CGetRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (GateType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateid", wireType)
			}
			m.Gateid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gateid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGetRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGetRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGetRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (GateType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateid", wireType)
			}
			m.Gateid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gateid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamePlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankInfo = append(m.RankInfo, &GateRank{})
			if err := m.RankInfo[len(m.RankInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamePlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamePlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGamePlay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGamePlay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGamePlay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGamePlay
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGamePlay
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGamePlay(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGamePlay = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGamePlay   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game_play.proto", fileDescriptorGamePlay) }

var fileDescriptorGamePlay = []byte{
	// 639 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4f, 0x4f, 0xd4, 0x40,
	0x14, 0xdf, 0xd9, 0xb6, 0x4b, 0xf7, 0xad, 0xac, 0xa4, 0x21, 0xa6, 0x21, 0xa6, 0x59, 0xe6, 0xb4,
	0x89, 0x64, 0x0f, 0xf8, 0x01, 0x34, 0x14, 0x43, 0x48, 0x4c, 0xc4, 0x29, 0x9c, 0xcd, 0xec, 0x76,
	0xc0, 0x06, 0xe8, 0x34, 0xd3, 0x59, 0xcc, 0x72, 0xf2, 0xe6, 0x55, 0x3f, 0x81, 0x57, 0x3f, 0x0a,
	0x47, 0x8e, 0x1e, 0xa5, 0x5e, 0x3c, 0xf2, 0x11, 0xcc, 0xcc, 0x94, 0x56, 0x30, 0xd5, 0x5d, 0xb8,
	0xbd, 0x3f, 0xbf, 0xf7, 0x9b, 0xfe, 0xde, 0xbc, 0x79, 0x85, 0xc7, 0x47, 0xf4, 0x94, 0xbd, 0xcb,
	0x4e, 0xe8, 0x6c, 0x94, 0x09, 0x2e, 0xb9, 0xd7, 0xce, 0xc6, 0x6b, 0x26, 0x38, 0xe1, 0x31, 0x33,
	0xc1, 0xb5, 0xbe, 0x41, 0x4d, 0xc7, 0xa5, 0x6f, 0x00, 0x72, 0x96, 0x95, 0x00, 0xbc, 0x0f, 0x9d,
	0x30, 0x92, 0x54, 0x48, 0x6f, 0x00, 0xb6, 0x8a, 0xfb, 0x68, 0x80, 0x86, 0xfd, 0xcd, 0x47, 0xa3,
	0x6c, 0x3c, 0xda, 0xa1, 0x92, 0xed, 0xcf, 0x32, 0x46, 0x74, 0xc6, 0x7b, 0x02, 0x9d, 0x23, 0x2a,
	0x59, 0x12, 0xfb, 0xed, 0x01, 0x1a, 0x3a, 0xa4, 0xf4, 0xbc, 0x15, 0xb0, 0x92, 0x38, 0xf7, 0xad,
	0x81, 0x35, 0xec, 0x12, 0x65, 0xe2, 0x03, 0xe8, 0x44, 0x86, 0x75, 0x08, 0xae, 0x42, 0xed, 0xa6,
	0x87, 0x5c, 0x33, 0xf7, 0x6a, 0xe6, 0x6d, 0x2a, 0x29, 0xa9, 0xb2, 0xde, 0x3a, 0x38, 0x4c, 0x08,
	0x2e, 0x34, 0x79, 0x7f, 0xb3, 0xa7, 0x60, 0xaf, 0x84, 0x08, 0x79, 0xcc, 0x88, 0xc9, 0x60, 0x0e,
	0xdd, 0xf0, 0xcd, 0x19, 0x13, 0xaa, 0xf2, 0x01, 0xdf, 0xeb, 0x81, 0x9d, 0x4b, 0x2a, 0x7c, 0x4b,
	0x47, 0xb5, 0xed, 0xad, 0x82, 0x93, 0x4f, 0xb8, 0x60, 0xbe, 0xad, 0x83, 0xc6, 0xc1, 0x17, 0x08,
	0xba, 0x51, 0x75, 0xe2, 0x1a, 0xb8, 0x13, 0x2a, 0xe2, 0x4a, 0x8b, 0x43, 0x2a, 0xff, 0x96, 0xce,
	0xf6, 0x3f, 0x75, 0x0e, 0xc1, 0xcd, 0x04, 0xcf, 0x34, 0x52, 0xb5, 0xac, 0x44, 0xee, 0x09, 0x9e,
	0x19, 0xe4, 0x4d, 0x56, 0x21, 0x05, 0x4d, 0x8f, 0x35, 0xd2, 0xae, 0x91, 0x8a, 0x93, 0xd0, 0xf4,
	0x98, 0x54, 0xd9, 0xba, 0x77, 0x4e, 0x63, 0xef, 0x96, 0xc0, 0x09, 0x43, 0x2a, 0x62, 0x2c, 0xc0,
	0x89, 0x94, 0xe1, 0x3d, 0x85, 0xee, 0x09, 0x3b, 0x94, 0xfb, 0xc9, 0x29, 0xcb, 0x4b, 0x3d, 0x75,
	0x60, 0x8e, 0xeb, 0x98, 0x5f, 0x09, 0xde, 0x82, 0x5e, 0xf8, 0x9a, 0x1f, 0x25, 0xe9, 0x9e, 0x48,
	0xce, 0x99, 0xb7, 0x7e, 0xeb, 0xea, 0x96, 0x4d, 0x51, 0x72, 0xfe, 0xe7, 0xdd, 0xad, 0x80, 0x15,
	0xd3, 0x99, 0x3e, 0x7c, 0x99, 0x28, 0x13, 0x7f, 0x80, 0x5e, 0xb4, 0x18, 0x07, 0x06, 0xfb, 0x24,
	0xc9, 0xa5, 0xdf, 0xd6, 0xdf, 0xd6, 0x57, 0x90, 0x9a, 0x80, 0xe8, 0x5c, 0x2d, 0xd3, 0x6a, 0xec,
	0xdc, 0x08, 0xdc, 0xf0, 0x20, 0x67, 0x4a, 0x96, 0x87, 0xc1, 0xc9, 0xee, 0x4e, 0x9d, 0x4a, 0xe8,
	0x53, 0x4d, 0x0a, 0xbf, 0x05, 0x37, 0x5a, 0x00, 0x3f, 0xcf, 0xe0, 0xbf, 0x00, 0x08, 0xa3, 0xf7,
	0x54, 0xdc, 0xbc, 0x94, 0xff, 0x4a, 0xef, 0x43, 0xbb, 0x1c, 0xfb, 0x2e, 0x69, 0x27, 0x31, 0xfe,
	0x84, 0x00, 0xa2, 0x85, 0x18, 0x56, 0xc0, 0x4a, 0xa7, 0xa7, 0xe5, 0xcb, 0x51, 0xa6, 0x2a, 0xd2,
	0xed, 0x34, 0x57, 0xad, 0x8b, 0x2a, 0xc6, 0xbb, 0xdd, 0xb4, 0x1b, 0xa5, 0xbc, 0x84, 0x5e, 0xb8,
	0x9b, 0x9e, 0x25, 0xf2, 0xde, 0x5a, 0xbe, 0x22, 0xe8, 0x45, 0x8b, 0x51, 0xfc, 0x2d, 0x66, 0x15,
	0x9c, 0x09, 0x9f, 0xa6, 0xb2, 0x5c, 0x02, 0xc6, 0xa9, 0x26, 0xc6, 0xae, 0x27, 0xa6, 0x3e, 0xe8,
	0xae, 0xc6, 0xe6, 0xb7, 0xe6, 0xaa, 0xa5, 0xaa, 0x5a, 0x83, 0x9f, 0xa9, 0x45, 0xa8, 0xac, 0xba,
	0x0c, 0x35, 0x96, 0xad, 0xc3, 0x52, 0xd9, 0x1a, 0xb5, 0xba, 0xa6, 0x39, 0x13, 0x49, 0xac, 0xe1,
	0x5d, 0x52, 0x7a, 0x78, 0x03, 0x96, 0x4a, 0xe9, 0xf3, 0x10, 0x6e, 0x83, 0x1b, 0xee, 0x30, 0xa9,
	0x96, 0xc5, 0xfd, 0xd7, 0x25, 0xfe, 0x82, 0xc0, 0x8d, 0x1e, 0x4c, 0x73, 0x6b, 0x9b, 0x59, 0xf3,
	0x6d, 0xb3, 0xc6, 0x29, 0xda, 0xda, 0xb8, 0xbc, 0x0a, 0x5a, 0xdf, 0xaf, 0x82, 0xd6, 0xf5, 0x55,
	0x80, 0x3e, 0x16, 0x01, 0xfa, 0x56, 0x04, 0xe8, 0xa2, 0x08, 0xd0, 0x65, 0x11, 0xa0, 0x1f, 0x45,
	0x80, 0x7e, 0x15, 0x41, 0xeb, 0xba, 0x08, 0xd0, 0xe7, 0x9f, 0x41, 0x6b, 0xdc, 0xd1, 0xff, 0xba,
	0xe7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xde, 0xc9, 0x11, 0x0f, 0x34, 0x07, 0x00, 0x00,
}
