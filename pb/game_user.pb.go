// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game_user.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 心跳
type CPing struct {
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *CPing) Reset()                    { *m = CPing{} }
func (*CPing) ProtoMessage()               {}
func (*CPing) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{0} }

func (m *CPing) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type SPing struct {
	Time  int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Error ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SPing) Reset()                    { *m = SPing{} }
func (*SPing) ProtoMessage()               {}
func (*SPing) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{1} }

func (m *SPing) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SPing) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 获取玩家的数据
type CUserData struct {
	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (m *CUserData) Reset()                    { *m = CUserData{} }
func (*CUserData) ProtoMessage()               {}
func (*CUserData) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{2} }

func (m *CUserData) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type SUserData struct {
	UserInfo *UserData `protobuf:"bytes,1,opt,name=userInfo" json:"userInfo,omitempty"`
	Error    ErrCode   `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SUserData) Reset()                    { *m = SUserData{} }
func (*SUserData) ProtoMessage()               {}
func (*SUserData) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{3} }

func (m *SUserData) GetUserInfo() *UserData {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *SUserData) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 玩家的关卡数据
type CGateData struct {
}

func (m *CGateData) Reset()                    { *m = CGateData{} }
func (*CGateData) ProtoMessage()               {}
func (*CGateData) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{4} }

type SGateData struct {
	GateInfo []*GateData `protobuf:"bytes,1,rep,name=gateInfo" json:"gateInfo,omitempty"`
	Error    ErrCode     `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SGateData) Reset()                    { *m = SGateData{} }
func (*SGateData) ProtoMessage()               {}
func (*SGateData) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{5} }

func (m *SGateData) GetGateInfo() []*GateData {
	if m != nil {
		return m.GateInfo
	}
	return nil
}

func (m *SGateData) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 玩家的道具数据
type CPropData struct {
}

func (m *CPropData) Reset()                    { *m = CPropData{} }
func (*CPropData) ProtoMessage()               {}
func (*CPropData) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{6} }

type SPropData struct {
	PropInfo []*PropData `protobuf:"bytes,1,rep,name=propInfo" json:"propInfo,omitempty"`
	Error    ErrCode     `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SPropData) Reset()                    { *m = SPropData{} }
func (*SPropData) ProtoMessage()               {}
func (*SPropData) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{7} }

func (m *SPropData) GetPropInfo() []*PropData {
	if m != nil {
		return m.PropInfo
	}
	return nil
}

func (m *SPropData) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 主动获取虚拟货币
type CGetCurrency struct {
}

func (m *CGetCurrency) Reset()                    { *m = CGetCurrency{} }
func (*CGetCurrency) ProtoMessage()               {}
func (*CGetCurrency) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{8} }

type SGetCurrency struct {
	Coin    int64 `protobuf:"varint,1,opt,name=coin,proto3" json:"coin,omitempty"`
	Diamond int64 `protobuf:"varint,2,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Energy  int64 `protobuf:"varint,3,opt,name=energy,proto3" json:"energy,omitempty"`
}

func (m *SGetCurrency) Reset()                    { *m = SGetCurrency{} }
func (*SGetCurrency) ProtoMessage()               {}
func (*SGetCurrency) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{9} }

func (m *SGetCurrency) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SGetCurrency) GetDiamond() int64 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *SGetCurrency) GetEnergy() int64 {
	if m != nil {
		return m.Energy
	}
	return 0
}

// 推送变更道具数量
type SPushProp struct {
	Type     LogType   `protobuf:"varint,1,opt,name=type,proto3,enum=pb.LogType" json:"type,omitempty"`
	PropInfo *PropData `protobuf:"bytes,2,opt,name=propInfo" json:"propInfo,omitempty"`
	Num      int64     `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *SPushProp) Reset()                    { *m = SPushProp{} }
func (*SPushProp) ProtoMessage()               {}
func (*SPushProp) Descriptor() ([]byte, []int) { return fileDescriptorGameUser, []int{10} }

func (m *SPushProp) GetType() LogType {
	if m != nil {
		return m.Type
	}
	return LOG_TYPE0
}

func (m *SPushProp) GetPropInfo() *PropData {
	if m != nil {
		return m.PropInfo
	}
	return nil
}

func (m *SPushProp) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto.RegisterType((*CPing)(nil), "pb.CPing")
	proto.RegisterType((*SPing)(nil), "pb.SPing")
	proto.RegisterType((*CUserData)(nil), "pb.CUserData")
	proto.RegisterType((*SUserData)(nil), "pb.SUserData")
	proto.RegisterType((*CGateData)(nil), "pb.CGateData")
	proto.RegisterType((*SGateData)(nil), "pb.SGateData")
	proto.RegisterType((*CPropData)(nil), "pb.CPropData")
	proto.RegisterType((*SPropData)(nil), "pb.SPropData")
	proto.RegisterType((*CGetCurrency)(nil), "pb.CGetCurrency")
	proto.RegisterType((*SGetCurrency)(nil), "pb.SGetCurrency")
	proto.RegisterType((*SPushProp)(nil), "pb.SPushProp")
}
func (this *CPing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPing)
	if !ok {
		that2, ok := that.(CPing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *SPing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SPing)
	if !ok {
		that2, ok := that.(SPing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CUserData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CUserData)
	if !ok {
		that2, ok := that.(CUserData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *SUserData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SUserData)
	if !ok {
		that2, ok := that.(SUserData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserInfo.Equal(that1.UserInfo) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CGateData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CGateData)
	if !ok {
		that2, ok := that.(CGateData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SGateData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SGateData)
	if !ok {
		that2, ok := that.(SGateData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.GateInfo) != len(that1.GateInfo) {
		return false
	}
	for i := range this.GateInfo {
		if !this.GateInfo[i].Equal(that1.GateInfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CPropData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPropData)
	if !ok {
		that2, ok := that.(CPropData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SPropData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SPropData)
	if !ok {
		that2, ok := that.(SPropData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PropInfo) != len(that1.PropInfo) {
		return false
	}
	for i := range this.PropInfo {
		if !this.PropInfo[i].Equal(that1.PropInfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CGetCurrency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CGetCurrency)
	if !ok {
		that2, ok := that.(CGetCurrency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SGetCurrency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SGetCurrency)
	if !ok {
		that2, ok := that.(SGetCurrency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Energy != that1.Energy {
		return false
	}
	return true
}
func (this *SPushProp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SPushProp)
	if !ok {
		that2, ok := that.(SPushProp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.PropInfo.Equal(that1.PropInfo) {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *CPing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CPing{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SPing{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CUserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CUserData{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SUserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SUserData{")
	if this.UserInfo != nil {
		s = append(s, "UserInfo: "+fmt.Sprintf("%#v", this.UserInfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CGateData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CGateData{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SGateData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SGateData{")
	if this.GateInfo != nil {
		s = append(s, "GateInfo: "+fmt.Sprintf("%#v", this.GateInfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CPropData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CPropData{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPropData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SPropData{")
	if this.PropInfo != nil {
		s = append(s, "PropInfo: "+fmt.Sprintf("%#v", this.PropInfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CGetCurrency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CGetCurrency{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SGetCurrency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SGetCurrency{")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Energy: "+fmt.Sprintf("%#v", this.Energy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPushProp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SPushProp{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.PropInfo != nil {
		s = append(s, "PropInfo: "+fmt.Sprintf("%#v", this.PropInfo)+",\n")
	}
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGameUser(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *SPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Time))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CUserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CUserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *SUserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SUserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.UserInfo.Size()))
		n1, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CGateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CGateData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SGateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGateData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GateInfo) > 0 {
		for _, msg := range m.GateInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGameUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CPropData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPropData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SPropData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPropData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PropInfo) > 0 {
		for _, msg := range m.PropInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGameUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CGetCurrency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CGetCurrency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SGetCurrency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGetCurrency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Coin))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Diamond))
	}
	if m.Energy != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Energy))
	}
	return i, nil
}

func (m *SPushProp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPushProp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Type))
	}
	if m.PropInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.PropInfo.Size()))
		n2, err := m.PropInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameUser(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func encodeVarintGameUser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CPing) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGameUser(uint64(m.Time))
	}
	return n
}

func (m *SPing) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGameUser(uint64(m.Time))
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CUserData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovGameUser(uint64(l))
	}
	return n
}

func (m *SUserData) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovGameUser(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CGateData) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SGateData) Size() (n int) {
	var l int
	_ = l
	if len(m.GateInfo) > 0 {
		for _, e := range m.GateInfo {
			l = e.Size()
			n += 1 + l + sovGameUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CPropData) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SPropData) Size() (n int) {
	var l int
	_ = l
	if len(m.PropInfo) > 0 {
		for _, e := range m.PropInfo {
			l = e.Size()
			n += 1 + l + sovGameUser(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovGameUser(uint64(m.Error))
	}
	return n
}

func (m *CGetCurrency) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SGetCurrency) Size() (n int) {
	var l int
	_ = l
	if m.Coin != 0 {
		n += 1 + sovGameUser(uint64(m.Coin))
	}
	if m.Diamond != 0 {
		n += 1 + sovGameUser(uint64(m.Diamond))
	}
	if m.Energy != 0 {
		n += 1 + sovGameUser(uint64(m.Energy))
	}
	return n
}

func (m *SPushProp) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGameUser(uint64(m.Type))
	}
	if m.PropInfo != nil {
		l = m.PropInfo.Size()
		n += 1 + l + sovGameUser(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovGameUser(uint64(m.Num))
	}
	return n
}

func sovGameUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGameUser(x uint64) (n int) {
	return sovGameUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CPing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPing{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPing{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CUserData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CUserData{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SUserData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SUserData{`,
		`UserInfo:` + strings.Replace(fmt.Sprintf("%v", this.UserInfo), "UserData", "UserData", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CGateData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CGateData{`,
		`}`,
	}, "")
	return s
}
func (this *SGateData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SGateData{`,
		`GateInfo:` + strings.Replace(fmt.Sprintf("%v", this.GateInfo), "GateData", "GateData", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CPropData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPropData{`,
		`}`,
	}, "")
	return s
}
func (this *SPropData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPropData{`,
		`PropInfo:` + strings.Replace(fmt.Sprintf("%v", this.PropInfo), "PropData", "PropData", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CGetCurrency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CGetCurrency{`,
		`}`,
	}, "")
	return s
}
func (this *SGetCurrency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SGetCurrency{`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Energy:` + fmt.Sprintf("%v", this.Energy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPushProp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPushProp{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`PropInfo:` + strings.Replace(fmt.Sprintf("%v", this.PropInfo), "PropData", "PropData", 1) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGameUser(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CUserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CUserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CUserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SUserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SUserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SUserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserData{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CGateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CGateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CGateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GateInfo = append(m.GateInfo, &GateData{})
			if err := m.GateInfo[len(m.GateInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPropData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPropData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPropData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPropData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPropData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPropData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropInfo = append(m.PropInfo, &PropData{})
			if err := m.PropInfo[len(m.PropInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CGetCurrency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CGetCurrency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CGetCurrency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGetCurrency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGetCurrency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGetCurrency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			m.Energy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Energy |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPushProp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPushProp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPushProp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (LogType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PropInfo == nil {
				m.PropInfo = &PropData{}
			}
			if err := m.PropInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGameUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGameUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGameUser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGameUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameUser   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game_user.proto", fileDescriptorGameUser) }

var fileDescriptorGameUser = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x6e, 0xdb, 0x30,
	0x10, 0xc6, 0x45, 0xcb, 0x76, 0xab, 0xb3, 0xe1, 0x16, 0x1a, 0x0a, 0xc1, 0x05, 0x58, 0x57, 0x5d,
	0x3c, 0x14, 0x1e, 0xdc, 0xbd, 0x43, 0x94, 0xc0, 0x08, 0x90, 0xc1, 0xa0, 0x1d, 0x20, 0x5b, 0x20,
	0x59, 0x8c, 0xac, 0x41, 0x22, 0x41, 0x4b, 0x83, 0xb6, 0x3c, 0x42, 0x1e, 0x23, 0x8f, 0x92, 0xd1,
	0x63, 0xc6, 0x58, 0x59, 0x32, 0xfa, 0x11, 0x02, 0x52, 0xa2, 0xf2, 0x07, 0x09, 0xe0, 0xed, 0xbe,
	0xfb, 0x8e, 0xf7, 0x3b, 0xe2, 0x0e, 0xbe, 0x45, 0x7e, 0x42, 0x2f, 0xf3, 0x0d, 0x15, 0x13, 0x2e,
	0x58, 0xc6, 0xec, 0x16, 0x0f, 0x86, 0x55, 0x72, 0xc5, 0x42, 0x5a, 0x25, 0x87, 0x03, 0x95, 0xe0,
	0x79, 0x50, 0xeb, 0xaa, 0x20, 0x2b, 0x78, 0x5d, 0xe0, 0xfe, 0x84, 0x8e, 0x37, 0x8f, 0xd3, 0xc8,
	0xb6, 0xa1, 0x9d, 0xc5, 0x09, 0x75, 0xd0, 0x08, 0x8d, 0x4d, 0xa2, 0x62, 0xf7, 0x3f, 0x74, 0x16,
	0x9f, 0x99, 0xf6, 0x6f, 0xe8, 0x50, 0x21, 0x98, 0x70, 0x5a, 0x23, 0x34, 0x1e, 0x4c, 0x7b, 0x13,
	0x1e, 0x4c, 0x4e, 0x84, 0xf0, 0x58, 0x48, 0x49, 0xe5, 0xb8, 0x7f, 0xc0, 0xf2, 0xce, 0x37, 0x54,
	0x1c, 0xfb, 0x99, 0x6f, 0xff, 0x80, 0xae, 0x9c, 0x36, 0x0e, 0x55, 0x17, 0x8b, 0xd4, 0xca, 0xbd,
	0x00, 0x6b, 0xd1, 0x14, 0x8d, 0xe1, 0xab, 0x4c, 0x9f, 0xa6, 0x57, 0x4c, 0x95, 0xf5, 0xa6, 0x7d,
	0xd9, 0x57, 0xfb, 0xa4, 0x71, 0x0f, 0xc1, 0xf7, 0xc0, 0xf2, 0x66, 0x7e, 0x46, 0xe5, 0x4b, 0x85,
	0xd1, 0x42, 0x62, 0x22, 0x3f, 0xa3, 0x35, 0xc6, 0xd4, 0x18, 0xed, 0x93, 0xc6, 0x3d, 0x14, 0x33,
	0x17, 0x8c, 0x37, 0x18, 0x2d, 0x24, 0x86, 0x0b, 0xc6, 0xdf, 0x63, 0xb4, 0x4f, 0x1a, 0xf7, 0x10,
	0xcc, 0x00, 0xfa, 0xde, 0x8c, 0x66, 0x5e, 0x2e, 0x04, 0x4d, 0x57, 0x85, 0xbb, 0x84, 0xfe, 0xe2,
	0x95, 0x96, 0x3b, 0x5a, 0xb1, 0x38, 0xd5, 0x3b, 0x92, 0xb1, 0xed, 0xc0, 0x97, 0x30, 0xf6, 0x13,
	0x96, 0x86, 0xaa, 0xb1, 0x49, 0xb4, 0x94, 0xdb, 0xa0, 0x29, 0x15, 0x51, 0xe1, 0x98, 0xca, 0xa8,
	0x95, 0xbb, 0x96, 0xf3, 0xe7, 0x9b, 0xb5, 0x9c, 0xd1, 0xfe, 0x05, 0x6d, 0x79, 0x2a, 0xaa, 0x65,
	0x3d, 0xd4, 0x19, 0x8b, 0x96, 0x05, 0xa7, 0x44, 0x19, 0x6f, 0x3e, 0xd8, 0x7a, 0x59, 0xd7, 0x07,
	0x1f, 0xfc, 0x0e, 0x66, 0x9a, 0x27, 0x35, 0x4c, 0x86, 0x47, 0x7f, 0xb7, 0x3b, 0x6c, 0xdc, 0xef,
	0xb0, 0xb1, 0xdf, 0x61, 0x74, 0x5d, 0x62, 0x74, 0x5b, 0x62, 0x74, 0x57, 0x62, 0xb4, 0x2d, 0x31,
	0x7a, 0x28, 0x31, 0x7a, 0x2a, 0xb1, 0xb1, 0x2f, 0x31, 0xba, 0x79, 0xc4, 0x46, 0xd0, 0x55, 0xe7,
	0xfa, 0xef, 0x39, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x58, 0x4e, 0xad, 0xf7, 0x02, 0x00, 0x00,
}
